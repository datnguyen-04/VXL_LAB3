
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ba0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002cac  08002cac  00003cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cd0  08002cd0  0000403c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cd0  08002cd0  0000403c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cd0  08002cd0  0000403c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cd0  08002cd0  00003cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cd4  08002cd4  00003cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08002cd8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000003c  08002d14  0000403c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002d14  000040f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c02  00000000  00000000  00004065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d61  00000000  00000000  0000cc67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0000e9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080e  00000000  00000000  0000f468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172a5  00000000  00000000  0000fc76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d02a  00000000  00000000  00026f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082749  00000000  00000000  00033f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b668e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002974  00000000  00000000  000b66d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000b9048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c94 	.word	0x08002c94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08002c94 	.word	0x08002c94

0800014c <isButtonPressed>:
	HAL_GPIO_WritePin(BUTTON_1_GPIO_Port, BUTTON_1_Pin, RELEASE_STATE);
	HAL_GPIO_WritePin(BUTTON_2_GPIO_Port, BUTTON_2_Pin, RELEASE_STATE);
	HAL_GPIO_WritePin(BUTTON_3_GPIO_Port, BUTTON_3_Pin, RELEASE_STATE);
}

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000058 	.word	0x20000058

08000180 <subKeyProcess>:

void subKeyProcess(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	@ (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000058 	.word	0x20000058

080001a0 <getKeyInput>:

void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e084      	b.n	80002b6 <getKeyInput+0x116>
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 80001ac:	4a46      	ldr	r2, [pc, #280]	@ (80002c8 <getKeyInput+0x128>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4945      	ldr	r1, [pc, #276]	@ (80002cc <getKeyInput+0x12c>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounceButtonBuffer2[i] = buttonBuffer[i];
 80001bc:	4a44      	ldr	r2, [pc, #272]	@ (80002d0 <getKeyInput+0x130>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4940      	ldr	r1, [pc, #256]	@ (80002c8 <getKeyInput+0x128>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//Read signal from user
		if (i == 0) {
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d10a      	bne.n	80001e8 <getKeyInput+0x48>
			buttonBuffer[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,
 80001d2:	2101      	movs	r1, #1
 80001d4:	483f      	ldr	r0, [pc, #252]	@ (80002d4 <getKeyInput+0x134>)
 80001d6:	f001 fd2f 	bl	8001c38 <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	4619      	mov	r1, r3
 80001de:	4a3c      	ldr	r2, [pc, #240]	@ (80002d0 <getKeyInput+0x130>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e6:	e01a      	b.n	800021e <getKeyInput+0x7e>
			BUTTON_1_Pin);
		} else if (i == 1) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d10a      	bne.n	8000204 <getKeyInput+0x64>
			buttonBuffer[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port,
 80001ee:	2102      	movs	r1, #2
 80001f0:	4838      	ldr	r0, [pc, #224]	@ (80002d4 <getKeyInput+0x134>)
 80001f2:	f001 fd21 	bl	8001c38 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4619      	mov	r1, r3
 80001fa:	4a35      	ldr	r2, [pc, #212]	@ (80002d0 <getKeyInput+0x130>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000202:	e00c      	b.n	800021e <getKeyInput+0x7e>
			BUTTON_2_Pin);
		} else if (i == 2) {
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b02      	cmp	r3, #2
 8000208:	d109      	bne.n	800021e <getKeyInput+0x7e>
			buttonBuffer[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port,
 800020a:	2104      	movs	r1, #4
 800020c:	4831      	ldr	r0, [pc, #196]	@ (80002d4 <getKeyInput+0x134>)
 800020e:	f001 fd13 	bl	8001c38 <HAL_GPIO_ReadPin>
 8000212:	4603      	mov	r3, r0
 8000214:	4619      	mov	r1, r3
 8000216:	4a2e      	ldr	r2, [pc, #184]	@ (80002d0 <getKeyInput+0x130>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			BUTTON_3_Pin);
		}
		//debouncing step
		if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 800021e:	4a2b      	ldr	r2, [pc, #172]	@ (80002cc <getKeyInput+0x12c>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000226:	4928      	ldr	r1, [pc, #160]	@ (80002c8 <getKeyInput+0x128>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022e:	429a      	cmp	r2, r3
 8000230:	d13e      	bne.n	80002b0 <getKeyInput+0x110>
				&& (debounceButtonBuffer2[i] == buttonBuffer[i])) {
 8000232:	4a25      	ldr	r2, [pc, #148]	@ (80002c8 <getKeyInput+0x128>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023a:	4925      	ldr	r1, [pc, #148]	@ (80002d0 <getKeyInput+0x130>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000242:	429a      	cmp	r2, r3
 8000244:	d134      	bne.n	80002b0 <getKeyInput+0x110>
			if (buttonBuffer[i] != longPressButtonBuffer[i]) {
 8000246:	4a22      	ldr	r2, [pc, #136]	@ (80002d0 <getKeyInput+0x130>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024e:	4922      	ldr	r1, [pc, #136]	@ (80002d8 <getKeyInput+0x138>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000256:	429a      	cmp	r2, r3
 8000258:	d016      	beq.n	8000288 <getKeyInput+0xe8>
				longPressButtonBuffer[i] = buttonBuffer[i];
 800025a:	4a1d      	ldr	r2, [pc, #116]	@ (80002d0 <getKeyInput+0x130>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000262:	491d      	ldr	r1, [pc, #116]	@ (80002d8 <getKeyInput+0x138>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//when pressed, do subKeyProcess()
				if (buttonBuffer[i] == PRESSED_STATE) {
 800026a:	4a19      	ldr	r2, [pc, #100]	@ (80002d0 <getKeyInput+0x130>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d11c      	bne.n	80002b0 <getKeyInput+0x110>
					TimeOutForKeyPress[i] = TIME_OUT_FOR_KEY_PRESS;
 8000276:	4a19      	ldr	r2, [pc, #100]	@ (80002dc <getKeyInput+0x13c>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	21c8      	movs	r1, #200	@ 0xc8
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 8000280:	6878      	ldr	r0, [r7, #4]
 8000282:	f7ff ff7d 	bl	8000180 <subKeyProcess>
 8000286:	e013      	b.n	80002b0 <getKeyInput+0x110>
				}
			}

			else {
				TimeOutForKeyPress[i]--;
 8000288:	4a14      	ldr	r2, [pc, #80]	@ (80002dc <getKeyInput+0x13c>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	1e5a      	subs	r2, r3, #1
 8000292:	4912      	ldr	r1, [pc, #72]	@ (80002dc <getKeyInput+0x13c>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 800029a:	4a10      	ldr	r2, [pc, #64]	@ (80002dc <getKeyInput+0x13c>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d104      	bne.n	80002b0 <getKeyInput+0x110>
					longPressButtonBuffer[i] = RELEASE_STATE;
 80002a6:	4a0c      	ldr	r2, [pc, #48]	@ (80002d8 <getKeyInput+0x138>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2101      	movs	r1, #1
 80002ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	3301      	adds	r3, #1
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2b02      	cmp	r3, #2
 80002ba:	f77f af77 	ble.w	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002be:	bf00      	nop
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000018 	.word	0x20000018
 80002cc:	2000000c 	.word	0x2000000c
 80002d0:	20000000 	.word	0x20000000
 80002d4:	40010c00 	.word	0x40010c00
 80002d8:	20000024 	.word	0x20000024
 80002dc:	20000064 	.word	0x20000064

080002e0 <initValues>:
int redTime;

int segModeTime;
int segValueTime;

void initValues() {
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	yellowTime = YELLOW_TIME;
 80002e4:	4b0d      	ldr	r3, [pc, #52]	@ (800031c <initValues+0x3c>)
 80002e6:	2202      	movs	r2, #2
 80002e8:	601a      	str	r2, [r3, #0]
	greenTime = GREEN_TIME;
 80002ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000320 <initValues+0x40>)
 80002ec:	2203      	movs	r2, #3
 80002ee:	601a      	str	r2, [r3, #0]
	redTime = RED_TIME;
 80002f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000324 <initValues+0x44>)
 80002f2:	2205      	movs	r2, #5
 80002f4:	601a      	str	r2, [r3, #0]
	segModeTime = redTime;
 80002f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <initValues+0x44>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000328 <initValues+0x48>)
 80002fc:	6013      	str	r3, [r2, #0]
	segValueTime = greenTime;
 80002fe:	4b08      	ldr	r3, [pc, #32]	@ (8000320 <initValues+0x40>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a0a      	ldr	r2, [pc, #40]	@ (800032c <initValues+0x4c>)
 8000304:	6013      	str	r3, [r2, #0]
	mode = INIT;
 8000306:	4b0a      	ldr	r3, [pc, #40]	@ (8000330 <initValues+0x50>)
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
	nmode = init;
 800030c:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <initValues+0x54>)
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
}
 8000312:	bf00      	nop
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000078 	.word	0x20000078
 8000320:	2000007c 	.word	0x2000007c
 8000324:	20000080 	.word	0x20000080
 8000328:	20000084 	.word	0x20000084
 800032c:	20000088 	.word	0x20000088
 8000330:	20000070 	.word	0x20000070
 8000334:	20000074 	.word	0x20000074

08000338 <display7SEG_Mode>:
 *      Author: thinkie
 */

#include "led_display.h"

void display7SEG_Mode(int counter) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
    switch (counter) {
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2b09      	cmp	r3, #9
 8000344:	f200 81c8 	bhi.w	80006d8 <display7SEG_Mode+0x3a0>
 8000348:	a201      	add	r2, pc, #4	@ (adr r2, 8000350 <display7SEG_Mode+0x18>)
 800034a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800034e:	bf00      	nop
 8000350:	08000379 	.word	0x08000379
 8000354:	080003cf 	.word	0x080003cf
 8000358:	08000425 	.word	0x08000425
 800035c:	0800047b 	.word	0x0800047b
 8000360:	080004d1 	.word	0x080004d1
 8000364:	08000527 	.word	0x08000527
 8000368:	0800057d 	.word	0x0800057d
 800036c:	080005d3 	.word	0x080005d3
 8000370:	08000629 	.word	0x08000629
 8000374:	0800067f 	.word	0x0800067f
        case 0:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800037e:	48d5      	ldr	r0, [pc, #852]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000380:	f001 fc71 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800038a:	48d2      	ldr	r0, [pc, #840]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800038c:	f001 fc6b 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000396:	48cf      	ldr	r0, [pc, #828]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000398:	f001 fc65 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003a2:	48cc      	ldr	r0, [pc, #816]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80003a4:	f001 fc5f 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003ae:	48c9      	ldr	r0, [pc, #804]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80003b0:	f001 fc59 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003ba:	48c6      	ldr	r0, [pc, #792]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80003bc:	f001 fc53 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003c6:	48c3      	ldr	r0, [pc, #780]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80003c8:	f001 fc4d 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 80003cc:	e185      	b.n	80006da <display7SEG_Mode+0x3a2>
        case 1:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003d4:	48bf      	ldr	r0, [pc, #764]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80003d6:	f001 fc46 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003e0:	48bc      	ldr	r0, [pc, #752]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80003e2:	f001 fc40 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003ec:	48b9      	ldr	r0, [pc, #740]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80003ee:	f001 fc3a 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003f8:	48b6      	ldr	r0, [pc, #728]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80003fa:	f001 fc34 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, SET);
 80003fe:	2201      	movs	r2, #1
 8000400:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000404:	48b3      	ldr	r0, [pc, #716]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000406:	f001 fc2e 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, SET);
 800040a:	2201      	movs	r2, #1
 800040c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000410:	48b0      	ldr	r0, [pc, #704]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000412:	f001 fc28 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, SET);
 8000416:	2201      	movs	r2, #1
 8000418:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800041c:	48ad      	ldr	r0, [pc, #692]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800041e:	f001 fc22 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 8000422:	e15a      	b.n	80006da <display7SEG_Mode+0x3a2>
        case 2:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800042a:	48aa      	ldr	r0, [pc, #680]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800042c:	f001 fc1b 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000436:	48a7      	ldr	r0, [pc, #668]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000438:	f001 fc15 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000442:	48a4      	ldr	r0, [pc, #656]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000444:	f001 fc0f 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800044e:	48a1      	ldr	r0, [pc, #644]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000450:	f001 fc09 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800045a:	489e      	ldr	r0, [pc, #632]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800045c:	f001 fc03 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, SET);
 8000460:	2201      	movs	r2, #1
 8000462:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000466:	489b      	ldr	r0, [pc, #620]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000468:	f001 fbfd 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000472:	4898      	ldr	r0, [pc, #608]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000474:	f001 fbf7 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 8000478:	e12f      	b.n	80006da <display7SEG_Mode+0x3a2>
        case 3:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000480:	4894      	ldr	r0, [pc, #592]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000482:	f001 fbf0 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800048c:	4891      	ldr	r0, [pc, #580]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800048e:	f001 fbea 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000498:	488e      	ldr	r0, [pc, #568]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800049a:	f001 fbe4 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004a4:	488b      	ldr	r0, [pc, #556]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80004a6:	f001 fbde 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004b0:	4888      	ldr	r0, [pc, #544]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80004b2:	f001 fbd8 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, SET);
 80004b6:	2201      	movs	r2, #1
 80004b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004bc:	4885      	ldr	r0, [pc, #532]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80004be:	f001 fbd2 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004c8:	4882      	ldr	r0, [pc, #520]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80004ca:	f001 fbcc 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 80004ce:	e104      	b.n	80006da <display7SEG_Mode+0x3a2>
        case 4:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004d6:	487f      	ldr	r0, [pc, #508]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80004d8:	f001 fbc5 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004e2:	487c      	ldr	r0, [pc, #496]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80004e4:	f001 fbbf 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004ee:	4879      	ldr	r0, [pc, #484]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80004f0:	f001 fbb9 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004fa:	4876      	ldr	r0, [pc, #472]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80004fc:	f001 fbb3 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, SET);
 8000500:	2201      	movs	r2, #1
 8000502:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000506:	4873      	ldr	r0, [pc, #460]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000508:	f001 fbad 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000512:	4870      	ldr	r0, [pc, #448]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000514:	f001 fba7 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800051e:	486d      	ldr	r0, [pc, #436]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000520:	f001 fba1 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 8000524:	e0d9      	b.n	80006da <display7SEG_Mode+0x3a2>
        case 5:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800052c:	4869      	ldr	r0, [pc, #420]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800052e:	f001 fb9a 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, SET);
 8000532:	2201      	movs	r2, #1
 8000534:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000538:	4866      	ldr	r0, [pc, #408]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800053a:	f001 fb94 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000544:	4863      	ldr	r0, [pc, #396]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000546:	f001 fb8e 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000550:	4860      	ldr	r0, [pc, #384]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000552:	f001 fb88 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, SET);
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800055c:	485d      	ldr	r0, [pc, #372]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800055e:	f001 fb82 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000568:	485a      	ldr	r0, [pc, #360]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800056a:	f001 fb7c 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000574:	4857      	ldr	r0, [pc, #348]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000576:	f001 fb76 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 800057a:	e0ae      	b.n	80006da <display7SEG_Mode+0x3a2>
        case 6:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000582:	4854      	ldr	r0, [pc, #336]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000584:	f001 fb6f 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, SET);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800058e:	4851      	ldr	r0, [pc, #324]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000590:	f001 fb69 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800059a:	484e      	ldr	r0, [pc, #312]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800059c:	f001 fb63 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005a6:	484b      	ldr	r0, [pc, #300]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80005a8:	f001 fb5d 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b2:	4848      	ldr	r0, [pc, #288]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80005b4:	f001 fb57 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005be:	4845      	ldr	r0, [pc, #276]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80005c0:	f001 fb51 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005ca:	4842      	ldr	r0, [pc, #264]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80005cc:	f001 fb4b 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 80005d0:	e083      	b.n	80006da <display7SEG_Mode+0x3a2>
        case 7:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005d8:	483e      	ldr	r0, [pc, #248]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80005da:	f001 fb44 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005e4:	483b      	ldr	r0, [pc, #236]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80005e6:	f001 fb3e 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005f0:	4838      	ldr	r0, [pc, #224]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80005f2:	f001 fb38 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005fc:	4835      	ldr	r0, [pc, #212]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80005fe:	f001 fb32 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, SET);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000608:	4832      	ldr	r0, [pc, #200]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800060a:	f001 fb2c 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000614:	482f      	ldr	r0, [pc, #188]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000616:	f001 fb26 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000620:	482c      	ldr	r0, [pc, #176]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000622:	f001 fb20 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 8000626:	e058      	b.n	80006da <display7SEG_Mode+0x3a2>
        case 8:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800062e:	4829      	ldr	r0, [pc, #164]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000630:	f001 fb19 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800063a:	4826      	ldr	r0, [pc, #152]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800063c:	f001 fb13 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000646:	4823      	ldr	r0, [pc, #140]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000648:	f001 fb0d 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000652:	4820      	ldr	r0, [pc, #128]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000654:	f001 fb07 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800065e:	481d      	ldr	r0, [pc, #116]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000660:	f001 fb01 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800066a:	481a      	ldr	r0, [pc, #104]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800066c:	f001 fafb 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000676:	4817      	ldr	r0, [pc, #92]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000678:	f001 faf5 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 800067c:	e02d      	b.n	80006da <display7SEG_Mode+0x3a2>
        case 9:
            HAL_GPIO_WritePin(MODE_A_GPIO_Port, MODE_A_Pin, RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000684:	4813      	ldr	r0, [pc, #76]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000686:	f001 faee 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_B_GPIO_Port, MODE_B_Pin, RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000690:	4810      	ldr	r0, [pc, #64]	@ (80006d4 <display7SEG_Mode+0x39c>)
 8000692:	f001 fae8 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_C_GPIO_Port, MODE_C_Pin, RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800069c:	480d      	ldr	r0, [pc, #52]	@ (80006d4 <display7SEG_Mode+0x39c>)
 800069e:	f001 fae2 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_D_GPIO_Port, MODE_D_Pin, RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006a8:	480a      	ldr	r0, [pc, #40]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80006aa:	f001 fadc 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_E_GPIO_Port, MODE_E_Pin, SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006b4:	4807      	ldr	r0, [pc, #28]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80006b6:	f001 fad6 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_F_GPIO_Port, MODE_F_Pin, RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006c0:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80006c2:	f001 fad0 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MODE_G_GPIO_Port, MODE_G_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006cc:	4801      	ldr	r0, [pc, #4]	@ (80006d4 <display7SEG_Mode+0x39c>)
 80006ce:	f001 faca 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 80006d2:	e002      	b.n	80006da <display7SEG_Mode+0x3a2>
 80006d4:	40010800 	.word	0x40010800
        default:
            break;
 80006d8:	bf00      	nop
    }
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop

080006e4 <display7SEG_Value>:
void display7SEG_Value(int counter) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    switch (counter) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b09      	cmp	r3, #9
 80006f0:	f200 8194 	bhi.w	8000a1c <display7SEG_Value+0x338>
 80006f4:	a201      	add	r2, pc, #4	@ (adr r2, 80006fc <display7SEG_Value+0x18>)
 80006f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fa:	bf00      	nop
 80006fc:	08000725 	.word	0x08000725
 8000700:	08000771 	.word	0x08000771
 8000704:	080007bd 	.word	0x080007bd
 8000708:	08000809 	.word	0x08000809
 800070c:	08000855 	.word	0x08000855
 8000710:	080008a1 	.word	0x080008a1
 8000714:	080008ed 	.word	0x080008ed
 8000718:	08000939 	.word	0x08000939
 800071c:	08000985 	.word	0x08000985
 8000720:	080009d1 	.word	0x080009d1
        case 0:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2108      	movs	r1, #8
 8000728:	48bf      	ldr	r0, [pc, #764]	@ (8000a28 <display7SEG_Value+0x344>)
 800072a:	f001 fa9c 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2110      	movs	r1, #16
 8000732:	48bd      	ldr	r0, [pc, #756]	@ (8000a28 <display7SEG_Value+0x344>)
 8000734:	f001 fa97 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2120      	movs	r1, #32
 800073c:	48ba      	ldr	r0, [pc, #744]	@ (8000a28 <display7SEG_Value+0x344>)
 800073e:	f001 fa92 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2140      	movs	r1, #64	@ 0x40
 8000746:	48b8      	ldr	r0, [pc, #736]	@ (8000a28 <display7SEG_Value+0x344>)
 8000748:	f001 fa8d 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2180      	movs	r1, #128	@ 0x80
 8000750:	48b5      	ldr	r0, [pc, #724]	@ (8000a28 <display7SEG_Value+0x344>)
 8000752:	f001 fa88 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800075c:	48b2      	ldr	r0, [pc, #712]	@ (8000a28 <display7SEG_Value+0x344>)
 800075e:	f001 fa82 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, SET);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000768:	48af      	ldr	r0, [pc, #700]	@ (8000a28 <display7SEG_Value+0x344>)
 800076a:	f001 fa7c 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 800076e:	e156      	b.n	8000a1e <display7SEG_Value+0x33a>
        case 1:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2108      	movs	r1, #8
 8000774:	48ac      	ldr	r0, [pc, #688]	@ (8000a28 <display7SEG_Value+0x344>)
 8000776:	f001 fa76 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2110      	movs	r1, #16
 800077e:	48aa      	ldr	r0, [pc, #680]	@ (8000a28 <display7SEG_Value+0x344>)
 8000780:	f001 fa71 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2120      	movs	r1, #32
 8000788:	48a7      	ldr	r0, [pc, #668]	@ (8000a28 <display7SEG_Value+0x344>)
 800078a:	f001 fa6c 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2140      	movs	r1, #64	@ 0x40
 8000792:	48a5      	ldr	r0, [pc, #660]	@ (8000a28 <display7SEG_Value+0x344>)
 8000794:	f001 fa67 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2180      	movs	r1, #128	@ 0x80
 800079c:	48a2      	ldr	r0, [pc, #648]	@ (8000a28 <display7SEG_Value+0x344>)
 800079e:	f001 fa62 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007a8:	489f      	ldr	r0, [pc, #636]	@ (8000a28 <display7SEG_Value+0x344>)
 80007aa:	f001 fa5c 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007b4:	489c      	ldr	r0, [pc, #624]	@ (8000a28 <display7SEG_Value+0x344>)
 80007b6:	f001 fa56 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 80007ba:	e130      	b.n	8000a1e <display7SEG_Value+0x33a>
        case 2:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2108      	movs	r1, #8
 80007c0:	4899      	ldr	r0, [pc, #612]	@ (8000a28 <display7SEG_Value+0x344>)
 80007c2:	f001 fa50 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2110      	movs	r1, #16
 80007ca:	4897      	ldr	r0, [pc, #604]	@ (8000a28 <display7SEG_Value+0x344>)
 80007cc:	f001 fa4b 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2120      	movs	r1, #32
 80007d4:	4894      	ldr	r0, [pc, #592]	@ (8000a28 <display7SEG_Value+0x344>)
 80007d6:	f001 fa46 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2140      	movs	r1, #64	@ 0x40
 80007de:	4892      	ldr	r0, [pc, #584]	@ (8000a28 <display7SEG_Value+0x344>)
 80007e0:	f001 fa41 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2180      	movs	r1, #128	@ 0x80
 80007e8:	488f      	ldr	r0, [pc, #572]	@ (8000a28 <display7SEG_Value+0x344>)
 80007ea:	f001 fa3c 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007f4:	488c      	ldr	r0, [pc, #560]	@ (8000a28 <display7SEG_Value+0x344>)
 80007f6:	f001 fa36 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000800:	4889      	ldr	r0, [pc, #548]	@ (8000a28 <display7SEG_Value+0x344>)
 8000802:	f001 fa30 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 8000806:	e10a      	b.n	8000a1e <display7SEG_Value+0x33a>
        case 3:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2108      	movs	r1, #8
 800080c:	4886      	ldr	r0, [pc, #536]	@ (8000a28 <display7SEG_Value+0x344>)
 800080e:	f001 fa2a 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2110      	movs	r1, #16
 8000816:	4884      	ldr	r0, [pc, #528]	@ (8000a28 <display7SEG_Value+0x344>)
 8000818:	f001 fa25 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2120      	movs	r1, #32
 8000820:	4881      	ldr	r0, [pc, #516]	@ (8000a28 <display7SEG_Value+0x344>)
 8000822:	f001 fa20 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2140      	movs	r1, #64	@ 0x40
 800082a:	487f      	ldr	r0, [pc, #508]	@ (8000a28 <display7SEG_Value+0x344>)
 800082c:	f001 fa1b 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2180      	movs	r1, #128	@ 0x80
 8000834:	487c      	ldr	r0, [pc, #496]	@ (8000a28 <display7SEG_Value+0x344>)
 8000836:	f001 fa16 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, SET);
 800083a:	2201      	movs	r2, #1
 800083c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000840:	4879      	ldr	r0, [pc, #484]	@ (8000a28 <display7SEG_Value+0x344>)
 8000842:	f001 fa10 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800084c:	4876      	ldr	r0, [pc, #472]	@ (8000a28 <display7SEG_Value+0x344>)
 800084e:	f001 fa0a 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 8000852:	e0e4      	b.n	8000a1e <display7SEG_Value+0x33a>
        case 4:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2108      	movs	r1, #8
 8000858:	4873      	ldr	r0, [pc, #460]	@ (8000a28 <display7SEG_Value+0x344>)
 800085a:	f001 fa04 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2110      	movs	r1, #16
 8000862:	4871      	ldr	r0, [pc, #452]	@ (8000a28 <display7SEG_Value+0x344>)
 8000864:	f001 f9ff 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	2120      	movs	r1, #32
 800086c:	486e      	ldr	r0, [pc, #440]	@ (8000a28 <display7SEG_Value+0x344>)
 800086e:	f001 f9fa 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2140      	movs	r1, #64	@ 0x40
 8000876:	486c      	ldr	r0, [pc, #432]	@ (8000a28 <display7SEG_Value+0x344>)
 8000878:	f001 f9f5 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2180      	movs	r1, #128	@ 0x80
 8000880:	4869      	ldr	r0, [pc, #420]	@ (8000a28 <display7SEG_Value+0x344>)
 8000882:	f001 f9f0 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800088c:	4866      	ldr	r0, [pc, #408]	@ (8000a28 <display7SEG_Value+0x344>)
 800088e:	f001 f9ea 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000898:	4863      	ldr	r0, [pc, #396]	@ (8000a28 <display7SEG_Value+0x344>)
 800089a:	f001 f9e4 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 800089e:	e0be      	b.n	8000a1e <display7SEG_Value+0x33a>
        case 5:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2108      	movs	r1, #8
 80008a4:	4860      	ldr	r0, [pc, #384]	@ (8000a28 <display7SEG_Value+0x344>)
 80008a6:	f001 f9de 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	2110      	movs	r1, #16
 80008ae:	485e      	ldr	r0, [pc, #376]	@ (8000a28 <display7SEG_Value+0x344>)
 80008b0:	f001 f9d9 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2120      	movs	r1, #32
 80008b8:	485b      	ldr	r0, [pc, #364]	@ (8000a28 <display7SEG_Value+0x344>)
 80008ba:	f001 f9d4 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2140      	movs	r1, #64	@ 0x40
 80008c2:	4859      	ldr	r0, [pc, #356]	@ (8000a28 <display7SEG_Value+0x344>)
 80008c4:	f001 f9cf 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2180      	movs	r1, #128	@ 0x80
 80008cc:	4856      	ldr	r0, [pc, #344]	@ (8000a28 <display7SEG_Value+0x344>)
 80008ce:	f001 f9ca 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008d8:	4853      	ldr	r0, [pc, #332]	@ (8000a28 <display7SEG_Value+0x344>)
 80008da:	f001 f9c4 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008e4:	4850      	ldr	r0, [pc, #320]	@ (8000a28 <display7SEG_Value+0x344>)
 80008e6:	f001 f9be 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 80008ea:	e098      	b.n	8000a1e <display7SEG_Value+0x33a>
        case 6:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2108      	movs	r1, #8
 80008f0:	484d      	ldr	r0, [pc, #308]	@ (8000a28 <display7SEG_Value+0x344>)
 80008f2:	f001 f9b8 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2110      	movs	r1, #16
 80008fa:	484b      	ldr	r0, [pc, #300]	@ (8000a28 <display7SEG_Value+0x344>)
 80008fc:	f001 f9b3 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2120      	movs	r1, #32
 8000904:	4848      	ldr	r0, [pc, #288]	@ (8000a28 <display7SEG_Value+0x344>)
 8000906:	f001 f9ae 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2140      	movs	r1, #64	@ 0x40
 800090e:	4846      	ldr	r0, [pc, #280]	@ (8000a28 <display7SEG_Value+0x344>)
 8000910:	f001 f9a9 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	2180      	movs	r1, #128	@ 0x80
 8000918:	4843      	ldr	r0, [pc, #268]	@ (8000a28 <display7SEG_Value+0x344>)
 800091a:	f001 f9a4 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000924:	4840      	ldr	r0, [pc, #256]	@ (8000a28 <display7SEG_Value+0x344>)
 8000926:	f001 f99e 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000930:	483d      	ldr	r0, [pc, #244]	@ (8000a28 <display7SEG_Value+0x344>)
 8000932:	f001 f998 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 8000936:	e072      	b.n	8000a1e <display7SEG_Value+0x33a>
        case 7:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2108      	movs	r1, #8
 800093c:	483a      	ldr	r0, [pc, #232]	@ (8000a28 <display7SEG_Value+0x344>)
 800093e:	f001 f992 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2110      	movs	r1, #16
 8000946:	4838      	ldr	r0, [pc, #224]	@ (8000a28 <display7SEG_Value+0x344>)
 8000948:	f001 f98d 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2120      	movs	r1, #32
 8000950:	4835      	ldr	r0, [pc, #212]	@ (8000a28 <display7SEG_Value+0x344>)
 8000952:	f001 f988 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, SET);
 8000956:	2201      	movs	r2, #1
 8000958:	2140      	movs	r1, #64	@ 0x40
 800095a:	4833      	ldr	r0, [pc, #204]	@ (8000a28 <display7SEG_Value+0x344>)
 800095c:	f001 f983 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2180      	movs	r1, #128	@ 0x80
 8000964:	4830      	ldr	r0, [pc, #192]	@ (8000a28 <display7SEG_Value+0x344>)
 8000966:	f001 f97e 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, SET);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000970:	482d      	ldr	r0, [pc, #180]	@ (8000a28 <display7SEG_Value+0x344>)
 8000972:	f001 f978 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, SET);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800097c:	482a      	ldr	r0, [pc, #168]	@ (8000a28 <display7SEG_Value+0x344>)
 800097e:	f001 f972 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 8000982:	e04c      	b.n	8000a1e <display7SEG_Value+0x33a>
        case 8:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2108      	movs	r1, #8
 8000988:	4827      	ldr	r0, [pc, #156]	@ (8000a28 <display7SEG_Value+0x344>)
 800098a:	f001 f96c 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2110      	movs	r1, #16
 8000992:	4825      	ldr	r0, [pc, #148]	@ (8000a28 <display7SEG_Value+0x344>)
 8000994:	f001 f967 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2120      	movs	r1, #32
 800099c:	4822      	ldr	r0, [pc, #136]	@ (8000a28 <display7SEG_Value+0x344>)
 800099e:	f001 f962 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2140      	movs	r1, #64	@ 0x40
 80009a6:	4820      	ldr	r0, [pc, #128]	@ (8000a28 <display7SEG_Value+0x344>)
 80009a8:	f001 f95d 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2180      	movs	r1, #128	@ 0x80
 80009b0:	481d      	ldr	r0, [pc, #116]	@ (8000a28 <display7SEG_Value+0x344>)
 80009b2:	f001 f958 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009bc:	481a      	ldr	r0, [pc, #104]	@ (8000a28 <display7SEG_Value+0x344>)
 80009be:	f001 f952 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009c8:	4817      	ldr	r0, [pc, #92]	@ (8000a28 <display7SEG_Value+0x344>)
 80009ca:	f001 f94c 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 80009ce:	e026      	b.n	8000a1e <display7SEG_Value+0x33a>
        case 9:
            HAL_GPIO_WritePin(VALUE_A_GPIO_Port, VALUE_A_Pin, RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2108      	movs	r1, #8
 80009d4:	4814      	ldr	r0, [pc, #80]	@ (8000a28 <display7SEG_Value+0x344>)
 80009d6:	f001 f946 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_B_GPIO_Port, VALUE_B_Pin, RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2110      	movs	r1, #16
 80009de:	4812      	ldr	r0, [pc, #72]	@ (8000a28 <display7SEG_Value+0x344>)
 80009e0:	f001 f941 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_C_GPIO_Port, VALUE_C_Pin, RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2120      	movs	r1, #32
 80009e8:	480f      	ldr	r0, [pc, #60]	@ (8000a28 <display7SEG_Value+0x344>)
 80009ea:	f001 f93c 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_D_GPIO_Port, VALUE_D_Pin, RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2140      	movs	r1, #64	@ 0x40
 80009f2:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <display7SEG_Value+0x344>)
 80009f4:	f001 f937 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_E_GPIO_Port, VALUE_E_Pin, SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2180      	movs	r1, #128	@ 0x80
 80009fc:	480a      	ldr	r0, [pc, #40]	@ (8000a28 <display7SEG_Value+0x344>)
 80009fe:	f001 f932 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_F_GPIO_Port, VALUE_F_Pin, RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a08:	4807      	ldr	r0, [pc, #28]	@ (8000a28 <display7SEG_Value+0x344>)
 8000a0a:	f001 f92c 	bl	8001c66 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(VALUE_G_GPIO_Port, VALUE_G_Pin, RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <display7SEG_Value+0x344>)
 8000a16:	f001 f926 	bl	8001c66 <HAL_GPIO_WritePin>
            break;
 8000a1a:	e000      	b.n	8000a1e <display7SEG_Value+0x33a>
        default:
            break;
 8000a1c:	bf00      	nop
    }
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40010c00 	.word	0x40010c00

08000a2c <update7SEG_Mode>:

void update7SEG_Mode(int index, int data) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
	switch (index) {
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d003      	beq.n	8000a44 <update7SEG_Mode+0x18>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d017      	beq.n	8000a72 <update7SEG_Mode+0x46>
		HAL_GPIO_WritePin(EN_MODE_0_GPIO_Port, EN_MODE_0_Pin, SET);
		HAL_GPIO_WritePin(EN_MODE_1_GPIO_Port, EN_MODE_1_Pin, RESET);
		display7SEG_Mode(data % 10);
		break;
	default:
		break;
 8000a42:	e032      	b.n	8000aaa <update7SEG_Mode+0x7e>
		HAL_GPIO_WritePin(EN_MODE_0_GPIO_Port, EN_MODE_0_Pin, RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a4a:	481a      	ldr	r0, [pc, #104]	@ (8000ab4 <update7SEG_Mode+0x88>)
 8000a4c:	f001 f90b 	bl	8001c66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_MODE_1_GPIO_Port, EN_MODE_1_Pin, SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a56:	4817      	ldr	r0, [pc, #92]	@ (8000ab4 <update7SEG_Mode+0x88>)
 8000a58:	f001 f905 	bl	8001c66 <HAL_GPIO_WritePin>
		display7SEG_Mode(data / 10);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	4a16      	ldr	r2, [pc, #88]	@ (8000ab8 <update7SEG_Mode+0x8c>)
 8000a60:	fb82 1203 	smull	r1, r2, r2, r3
 8000a64:	1092      	asrs	r2, r2, #2
 8000a66:	17db      	asrs	r3, r3, #31
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fc64 	bl	8000338 <display7SEG_Mode>
		break;
 8000a70:	e01b      	b.n	8000aaa <update7SEG_Mode+0x7e>
		HAL_GPIO_WritePin(EN_MODE_0_GPIO_Port, EN_MODE_0_Pin, SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a78:	480e      	ldr	r0, [pc, #56]	@ (8000ab4 <update7SEG_Mode+0x88>)
 8000a7a:	f001 f8f4 	bl	8001c66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_MODE_1_GPIO_Port, EN_MODE_1_Pin, RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a84:	480b      	ldr	r0, [pc, #44]	@ (8000ab4 <update7SEG_Mode+0x88>)
 8000a86:	f001 f8ee 	bl	8001c66 <HAL_GPIO_WritePin>
		display7SEG_Mode(data % 10);
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <update7SEG_Mode+0x8c>)
 8000a8e:	fb83 1302 	smull	r1, r3, r3, r2
 8000a92:	1099      	asrs	r1, r3, #2
 8000a94:	17d3      	asrs	r3, r2, #31
 8000a96:	1ac9      	subs	r1, r1, r3
 8000a98:	460b      	mov	r3, r1
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	440b      	add	r3, r1
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	1ad1      	subs	r1, r2, r3
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	f7ff fc48 	bl	8000338 <display7SEG_Mode>
		break;
 8000aa8:	bf00      	nop
	}
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40010c00 	.word	0x40010c00
 8000ab8:	66666667 	.word	0x66666667

08000abc <update7SEG_Value>:

void update7SEG_Value(int index, int data) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	switch (index) {
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d003      	beq.n	8000ad4 <update7SEG_Value+0x18>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d017      	beq.n	8000b02 <update7SEG_Value+0x46>
		HAL_GPIO_WritePin(EN_VAL_0_GPIO_Port, EN_VAL_0_Pin, SET);
		HAL_GPIO_WritePin(EN_VAL_1_GPIO_Port, EN_VAL_1_Pin, RESET);
		display7SEG_Value(data % 10);
		break;
	default:
		break;
 8000ad2:	e032      	b.n	8000b3a <update7SEG_Value+0x7e>
		HAL_GPIO_WritePin(EN_VAL_0_GPIO_Port, EN_VAL_0_Pin, RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ada:	481a      	ldr	r0, [pc, #104]	@ (8000b44 <update7SEG_Value+0x88>)
 8000adc:	f001 f8c3 	bl	8001c66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_VAL_1_GPIO_Port, EN_VAL_1_Pin, SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ae6:	4817      	ldr	r0, [pc, #92]	@ (8000b44 <update7SEG_Value+0x88>)
 8000ae8:	f001 f8bd 	bl	8001c66 <HAL_GPIO_WritePin>
		display7SEG_Value(data / 10);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	4a16      	ldr	r2, [pc, #88]	@ (8000b48 <update7SEG_Value+0x8c>)
 8000af0:	fb82 1203 	smull	r1, r2, r2, r3
 8000af4:	1092      	asrs	r2, r2, #2
 8000af6:	17db      	asrs	r3, r3, #31
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fdf2 	bl	80006e4 <display7SEG_Value>
		break;
 8000b00:	e01b      	b.n	8000b3a <update7SEG_Value+0x7e>
		HAL_GPIO_WritePin(EN_VAL_0_GPIO_Port, EN_VAL_0_Pin, SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b08:	480e      	ldr	r0, [pc, #56]	@ (8000b44 <update7SEG_Value+0x88>)
 8000b0a:	f001 f8ac 	bl	8001c66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_VAL_1_GPIO_Port, EN_VAL_1_Pin, RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b14:	480b      	ldr	r0, [pc, #44]	@ (8000b44 <update7SEG_Value+0x88>)
 8000b16:	f001 f8a6 	bl	8001c66 <HAL_GPIO_WritePin>
		display7SEG_Value(data % 10);
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <update7SEG_Value+0x8c>)
 8000b1e:	fb83 1302 	smull	r1, r3, r3, r2
 8000b22:	1099      	asrs	r1, r3, #2
 8000b24:	17d3      	asrs	r3, r2, #31
 8000b26:	1ac9      	subs	r1, r1, r3
 8000b28:	460b      	mov	r3, r1
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	1ad1      	subs	r1, r2, r3
 8000b32:	4608      	mov	r0, r1
 8000b34:	f7ff fdd6 	bl	80006e4 <display7SEG_Value>
		break;
 8000b38:	bf00      	nop
	}
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40010c00 	.word	0x40010c00
 8000b48:	66666667 	.word	0x66666667

08000b4c <segRun1>:

void segRun1() {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	update7SEG_Mode(MODE_0_7SEG, segModeTime);
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <segRun1+0x20>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4619      	mov	r1, r3
 8000b56:	2000      	movs	r0, #0
 8000b58:	f7ff ff68 	bl	8000a2c <update7SEG_Mode>
	update7SEG_Value(VALUE_0_7SEG, segValueTime);
 8000b5c:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <segRun1+0x24>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	2002      	movs	r0, #2
 8000b64:	f7ff ffaa 	bl	8000abc <update7SEG_Value>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000084 	.word	0x20000084
 8000b70:	20000088 	.word	0x20000088

08000b74 <segRun2>:

void segRun2() {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	update7SEG_Mode(MODE_1_7SEG, segModeTime);
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <segRun2+0x20>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff ff54 	bl	8000a2c <update7SEG_Mode>
	update7SEG_Value(VALUE_1_7SEG, segValueTime);
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <segRun2+0x24>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	2003      	movs	r0, #3
 8000b8c:	f7ff ff96 	bl	8000abc <update7SEG_Value>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000084 	.word	0x20000084
 8000b98:	20000088 	.word	0x20000088

08000b9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba0:	f000 fd5e 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba4:	f000 f80e 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba8:	f000 f894 	bl	8000cd4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bac:	f000 f846 	bl	8000c3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000bb0:	4803      	ldr	r0, [pc, #12]	@ (8000bc0 <main+0x24>)
 8000bb2:	f001 fcb7 	bl	8002524 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initValues();
 8000bb6:	f7ff fb93 	bl	80002e0 <initValues>
  while (1)
  {
	  trafficRun();
 8000bba:	f000 fb93 	bl	80012e4 <trafficRun>
 8000bbe:	e7fc      	b.n	8000bba <main+0x1e>
 8000bc0:	2000008c 	.word	0x2000008c

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b090      	sub	sp, #64	@ 0x40
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	2228      	movs	r2, #40	@ 0x28
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f002 f832 	bl	8002c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bea:	2301      	movs	r3, #1
 8000bec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bee:	2310      	movs	r3, #16
 8000bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf6:	f107 0318 	add.w	r3, r7, #24
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 f864 	bl	8001cc8 <HAL_RCC_OscConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c06:	f000 f8c7 	bl	8000d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0a:	230f      	movs	r3, #15
 8000c0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 fad2 	bl	80021cc <HAL_RCC_ClockConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c2e:	f000 f8b3 	bl	8000d98 <Error_Handler>
  }
}
 8000c32:	bf00      	nop
 8000c34:	3740      	adds	r7, #64	@ 0x40
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c50:	463b      	mov	r3, r7
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <MX_TIM2_Init+0x94>)
 8000c5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <MX_TIM2_Init+0x94>)
 8000c62:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000c66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c68:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <MX_TIM2_Init+0x94>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <MX_TIM2_Init+0x94>)
 8000c70:	2209      	movs	r2, #9
 8000c72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <MX_TIM2_Init+0x94>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <MX_TIM2_Init+0x94>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c80:	4813      	ldr	r0, [pc, #76]	@ (8000cd0 <MX_TIM2_Init+0x94>)
 8000c82:	f001 fbff 	bl	8002484 <HAL_TIM_Base_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c8c:	f000 f884 	bl	8000d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480c      	ldr	r0, [pc, #48]	@ (8000cd0 <MX_TIM2_Init+0x94>)
 8000c9e:	f001 fd7d 	bl	800279c <HAL_TIM_ConfigClockSource>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ca8:	f000 f876 	bl	8000d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cac:	2300      	movs	r3, #0
 8000cae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_TIM2_Init+0x94>)
 8000cba:	f001 ff55 	bl	8002b68 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cc4:	f000 f868 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	2000008c 	.word	0x2000008c

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	4b28      	ldr	r3, [pc, #160]	@ (8000d8c <MX_GPIO_Init+0xb8>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a27      	ldr	r2, [pc, #156]	@ (8000d8c <MX_GPIO_Init+0xb8>)
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b25      	ldr	r3, [pc, #148]	@ (8000d8c <MX_GPIO_Init+0xb8>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b22      	ldr	r3, [pc, #136]	@ (8000d8c <MX_GPIO_Init+0xb8>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a21      	ldr	r2, [pc, #132]	@ (8000d8c <MX_GPIO_Init+0xb8>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <MX_GPIO_Init+0xb8>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f64f 613f 	movw	r1, #65087	@ 0xfe3f
 8000d1e:	481c      	ldr	r0, [pc, #112]	@ (8000d90 <MX_GPIO_Init+0xbc>)
 8000d20:	f000 ffa1 	bl	8001c66 <HAL_GPIO_WritePin>
                          |YELLOW_2_Pin|GREEN_2_Pin|MODE_A_Pin|MODE_B_Pin
                          |MODE_C_Pin|MODE_D_Pin|MODE_E_Pin|MODE_F_Pin
                          |MODE_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_VAL_0_Pin|EN_VAL_1_Pin|EN_MODE_0_Pin|EN_MODE_1_Pin
 8000d24:	2200      	movs	r2, #0
 8000d26:	f24f 31f8 	movw	r1, #62456	@ 0xf3f8
 8000d2a:	481a      	ldr	r0, [pc, #104]	@ (8000d94 <MX_GPIO_Init+0xc0>)
 8000d2c:	f000 ff9b 	bl	8001c66 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_1_Pin YELLOW_1_Pin GREEN_1_Pin RED_2_Pin
                           YELLOW_2_Pin GREEN_2_Pin MODE_A_Pin MODE_B_Pin
                           MODE_C_Pin MODE_D_Pin MODE_E_Pin MODE_F_Pin
                           MODE_G_Pin */
  GPIO_InitStruct.Pin = RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000d30:	f64f 633f 	movw	r3, #65087	@ 0xfe3f
 8000d34:	60bb      	str	r3, [r7, #8]
                          |YELLOW_2_Pin|GREEN_2_Pin|MODE_A_Pin|MODE_B_Pin
                          |MODE_C_Pin|MODE_D_Pin|MODE_E_Pin|MODE_F_Pin
                          |MODE_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	4619      	mov	r1, r3
 8000d48:	4811      	ldr	r0, [pc, #68]	@ (8000d90 <MX_GPIO_Init+0xbc>)
 8000d4a:	f000 fdf9 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000d4e:	2307      	movs	r3, #7
 8000d50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <MX_GPIO_Init+0xc0>)
 8000d62:	f000 fded 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_VAL_0_Pin EN_VAL_1_Pin EN_MODE_0_Pin EN_MODE_1_Pin
                           VALUE_A_Pin VALUE_B_Pin VALUE_C_Pin VALUE_D_Pin
                           VALUE_E_Pin VALUE_F_Pin VALUE_G_Pin */
  GPIO_InitStruct.Pin = EN_VAL_0_Pin|EN_VAL_1_Pin|EN_MODE_0_Pin|EN_MODE_1_Pin
 8000d66:	f24f 33f8 	movw	r3, #62456	@ 0xf3f8
 8000d6a:	60bb      	str	r3, [r7, #8]
                          |VALUE_A_Pin|VALUE_B_Pin|VALUE_C_Pin|VALUE_D_Pin
                          |VALUE_E_Pin|VALUE_F_Pin|VALUE_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2302      	movs	r3, #2
 8000d76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <MX_GPIO_Init+0xc0>)
 8000d80:	f000 fdde 	bl	8001940 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d84:	bf00      	nop
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40010800 	.word	0x40010800
 8000d94:	40010c00 	.word	0x40010c00

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <Error_Handler+0x8>

08000da4 <normalMode>:
 *      Author: thinkie
 */

#include "normal_mode.h"

void normalMode() {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	switch (nmode) {
 8000da8:	4b4e      	ldr	r3, [pc, #312]	@ (8000ee4 <normalMode+0x140>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b04      	cmp	r3, #4
 8000dae:	f200 808e 	bhi.w	8000ece <normalMode+0x12a>
 8000db2:	a201      	add	r2, pc, #4	@ (adr r2, 8000db8 <normalMode+0x14>)
 8000db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db8:	08000dcd 	.word	0x08000dcd
 8000dbc:	08000dff 	.word	0x08000dff
 8000dc0:	08000e2d 	.word	0x08000e2d
 8000dc4:	08000e67 	.word	0x08000e67
 8000dc8:	08000e95 	.word	0x08000e95
	case init: {
		setTimer1(greenTime * 1000);
 8000dcc:	4b46      	ldr	r3, [pc, #280]	@ (8000ee8 <normalMode+0x144>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000dd4:	fb02 f303 	mul.w	r3, r2, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 f923 	bl	8001024 <setTimer1>
		segModeTime = redTime;
 8000dde:	4b43      	ldr	r3, [pc, #268]	@ (8000eec <normalMode+0x148>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a43      	ldr	r2, [pc, #268]	@ (8000ef0 <normalMode+0x14c>)
 8000de4:	6013      	str	r3, [r2, #0]
		segValueTime = greenTime;
 8000de6:	4b40      	ldr	r3, [pc, #256]	@ (8000ee8 <normalMode+0x144>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a42      	ldr	r2, [pc, #264]	@ (8000ef4 <normalMode+0x150>)
 8000dec:	6013      	str	r3, [r2, #0]
		setRed1();
 8000dee:	f000 f9f5 	bl	80011dc <setRed1>
		setGreen2();
 8000df2:	f000 fa61 	bl	80012b8 <setGreen2>
		nmode = mode1;
 8000df6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee4 <normalMode+0x140>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
		break;
 8000dfc:	e070      	b.n	8000ee0 <normalMode+0x13c>
	}
	case mode1: {
		if (timer1_flag == 1) {
 8000dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8000ef8 <normalMode+0x154>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d165      	bne.n	8000ed2 <normalMode+0x12e>
			setTimer1(yellowTime * 1000);
 8000e06:	4b3d      	ldr	r3, [pc, #244]	@ (8000efc <normalMode+0x158>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e0e:	fb02 f303 	mul.w	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f906 	bl	8001024 <setTimer1>
			setYellow2();
 8000e18:	f000 fa38 	bl	800128c <setYellow2>
			segValueTime = yellowTime;
 8000e1c:	4b37      	ldr	r3, [pc, #220]	@ (8000efc <normalMode+0x158>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a34      	ldr	r2, [pc, #208]	@ (8000ef4 <normalMode+0x150>)
 8000e22:	6013      	str	r3, [r2, #0]
			nmode = mode2;
 8000e24:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee4 <normalMode+0x140>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e2a:	e052      	b.n	8000ed2 <normalMode+0x12e>
	}
	case mode2: {
		if (timer1_flag == 1) {
 8000e2c:	4b32      	ldr	r3, [pc, #200]	@ (8000ef8 <normalMode+0x154>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d150      	bne.n	8000ed6 <normalMode+0x132>
			setTimer1(greenTime * 1000);
 8000e34:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee8 <normalMode+0x144>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e3c:	fb02 f303 	mul.w	r3, r2, r3
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 f8ef 	bl	8001024 <setTimer1>
			setGreen1();
 8000e46:	f000 f9f5 	bl	8001234 <setGreen1>
			setRed2();
 8000e4a:	f000 fa09 	bl	8001260 <setRed2>
			segModeTime = greenTime;
 8000e4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ee8 <normalMode+0x144>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a27      	ldr	r2, [pc, #156]	@ (8000ef0 <normalMode+0x14c>)
 8000e54:	6013      	str	r3, [r2, #0]
			segValueTime = redTime;
 8000e56:	4b25      	ldr	r3, [pc, #148]	@ (8000eec <normalMode+0x148>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a26      	ldr	r2, [pc, #152]	@ (8000ef4 <normalMode+0x150>)
 8000e5c:	6013      	str	r3, [r2, #0]
			nmode = mode3;
 8000e5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ee4 <normalMode+0x140>)
 8000e60:	2203      	movs	r2, #3
 8000e62:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e64:	e037      	b.n	8000ed6 <normalMode+0x132>
	}
	case mode3: {
		if (timer1_flag == 1) {
 8000e66:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <normalMode+0x154>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d135      	bne.n	8000eda <normalMode+0x136>
			setTimer1(yellowTime * 1000);
 8000e6e:	4b23      	ldr	r3, [pc, #140]	@ (8000efc <normalMode+0x158>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e76:	fb02 f303 	mul.w	r3, r2, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f8d2 	bl	8001024 <setTimer1>
			setYellow1();
 8000e80:	f000 f9c2 	bl	8001208 <setYellow1>
			segModeTime = yellowTime;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <normalMode+0x158>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a19      	ldr	r2, [pc, #100]	@ (8000ef0 <normalMode+0x14c>)
 8000e8a:	6013      	str	r3, [r2, #0]
			nmode = mode4;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <normalMode+0x140>)
 8000e8e:	2204      	movs	r2, #4
 8000e90:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e92:	e022      	b.n	8000eda <normalMode+0x136>
	}
	case mode4: {
		if (timer1_flag == 1) {
 8000e94:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <normalMode+0x154>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d120      	bne.n	8000ede <normalMode+0x13a>
			setTimer1(greenTime * 1000);
 8000e9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <normalMode+0x144>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ea4:	fb02 f303 	mul.w	r3, r2, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f8bb 	bl	8001024 <setTimer1>
			setRed1();
 8000eae:	f000 f995 	bl	80011dc <setRed1>
			setGreen2();
 8000eb2:	f000 fa01 	bl	80012b8 <setGreen2>
			segModeTime = redTime;
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <normalMode+0x148>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef0 <normalMode+0x14c>)
 8000ebc:	6013      	str	r3, [r2, #0]
			segValueTime = greenTime;
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <normalMode+0x144>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef4 <normalMode+0x150>)
 8000ec4:	6013      	str	r3, [r2, #0]
			nmode = mode1;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <normalMode+0x140>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
		}
		break;
 8000ecc:	e007      	b.n	8000ede <normalMode+0x13a>
	}
	default:
		break;
 8000ece:	bf00      	nop
 8000ed0:	e006      	b.n	8000ee0 <normalMode+0x13c>
		break;
 8000ed2:	bf00      	nop
 8000ed4:	e004      	b.n	8000ee0 <normalMode+0x13c>
		break;
 8000ed6:	bf00      	nop
 8000ed8:	e002      	b.n	8000ee0 <normalMode+0x13c>
		break;
 8000eda:	bf00      	nop
 8000edc:	e000      	b.n	8000ee0 <normalMode+0x13c>
		break;
 8000ede:	bf00      	nop
	}
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000074 	.word	0x20000074
 8000ee8:	2000007c 	.word	0x2000007c
 8000eec:	20000080 	.word	0x20000080
 8000ef0:	20000084 	.word	0x20000084
 8000ef4:	20000088 	.word	0x20000088
 8000ef8:	200000d4 	.word	0x200000d4
 8000efc:	20000078 	.word	0x20000078

08000f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f06:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <HAL_MspInit+0x5c>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	4a14      	ldr	r2, [pc, #80]	@ (8000f5c <HAL_MspInit+0x5c>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6193      	str	r3, [r2, #24]
 8000f12:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <HAL_MspInit+0x5c>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <HAL_MspInit+0x5c>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	4a0e      	ldr	r2, [pc, #56]	@ (8000f5c <HAL_MspInit+0x5c>)
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f28:	61d3      	str	r3, [r2, #28]
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <HAL_MspInit+0x5c>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_MspInit+0x60>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <HAL_MspInit+0x60>)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f52:	bf00      	nop
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010000 	.word	0x40010000

08000f64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f74:	d113      	bne.n	8000f9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f76:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x44>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x44>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	61d3      	str	r3, [r2, #28]
 8000f82:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x44>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	201c      	movs	r0, #28
 8000f94:	f000 fc9d 	bl	80018d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f98:	201c      	movs	r0, #28
 8000f9a:	f000 fcb6 	bl	800190a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffc:	f000 fb76 	bl	80016ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001008:	4802      	ldr	r0, [pc, #8]	@ (8001014 <TIM2_IRQHandler+0x10>)
 800100a:	f001 fad7 	bl	80025bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000008c 	.word	0x2000008c

08001018 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <setTimer1>:
int timer2_counter = 0;

int timer3_flag = 0;
int timer3_counter = 0;

void setTimer1(int duration) {
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a08      	ldr	r2, [pc, #32]	@ (8001050 <setTimer1+0x2c>)
 8001030:	fb82 1203 	smull	r1, r2, r2, r3
 8001034:	1092      	asrs	r2, r2, #2
 8001036:	17db      	asrs	r3, r3, #31
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	4a06      	ldr	r2, [pc, #24]	@ (8001054 <setTimer1+0x30>)
 800103c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <setTimer1+0x34>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	66666667 	.word	0x66666667
 8001054:	200000d8 	.word	0x200000d8
 8001058:	200000d4 	.word	0x200000d4

0800105c <setTimer2>:

void setTimer2(int duration) {
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a08      	ldr	r2, [pc, #32]	@ (8001088 <setTimer2+0x2c>)
 8001068:	fb82 1203 	smull	r1, r2, r2, r3
 800106c:	1092      	asrs	r2, r2, #2
 800106e:	17db      	asrs	r3, r3, #31
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	4a06      	ldr	r2, [pc, #24]	@ (800108c <setTimer2+0x30>)
 8001074:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001076:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <setTimer2+0x34>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	66666667 	.word	0x66666667
 800108c:	200000e0 	.word	0x200000e0
 8001090:	200000dc 	.word	0x200000dc

08001094 <timeRun>:
void setTimer3(int duration) {
	timer3_counter = duration / TIMER_CYCLE;
	timer3_flag = 0;
}

void timeRun() {
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8001098:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <timeRun+0x5c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	dd05      	ble.n	80010ac <timeRun+0x18>
		timer1_counter--;
 80010a0:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <timeRun+0x5c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	4a12      	ldr	r2, [pc, #72]	@ (80010f0 <timeRun+0x5c>)
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e002      	b.n	80010b2 <timeRun+0x1e>
	} else {
		timer1_flag = 1;
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <timeRun+0x60>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]
	}

	if (timer2_counter > 0) {
 80010b2:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <timeRun+0x64>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	dd05      	ble.n	80010c6 <timeRun+0x32>
		timer2_counter--;
 80010ba:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <timeRun+0x64>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3b01      	subs	r3, #1
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <timeRun+0x64>)
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	e002      	b.n	80010cc <timeRun+0x38>
	} else {
		timer2_flag = 1;
 80010c6:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <timeRun+0x68>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	601a      	str	r2, [r3, #0]
	}

	if (timer3_counter > 0) {
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <timeRun+0x6c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dd05      	ble.n	80010e0 <timeRun+0x4c>
		timer3_counter--;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <timeRun+0x6c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3b01      	subs	r3, #1
 80010da:	4a09      	ldr	r2, [pc, #36]	@ (8001100 <timeRun+0x6c>)
 80010dc:	6013      	str	r3, [r2, #0]
	} else {
		timer3_flag = 1;
	}
}
 80010de:	e002      	b.n	80010e6 <timeRun+0x52>
		timer3_flag = 1;
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <timeRun+0x70>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	200000d8 	.word	0x200000d8
 80010f4:	200000d4 	.word	0x200000d4
 80010f8:	200000e0 	.word	0x200000e0
 80010fc:	200000dc 	.word	0x200000dc
 8001100:	200000e8 	.word	0x200000e8
 8001104:	200000e4 	.word	0x200000e4

08001108 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM2 ) {
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001118:	d103      	bne.n	8001122 <HAL_TIM_PeriodElapsedCallback+0x1a>
		getKeyInput();
 800111a:	f7ff f841 	bl	80001a0 <getKeyInput>
		timeRun();
 800111e:	f7ff ffb9 	bl	8001094 <timeRun>
	}

}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <blinkingLeds>:
 *      Author: thinkie
 */

#include "traffic_led.h"

void blinkingLeds(int mode) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    switch (mode) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b04      	cmp	r3, #4
 8001138:	d01b      	beq.n	8001172 <blinkingLeds+0x46>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b04      	cmp	r3, #4
 800113e:	dc21      	bgt.n	8001184 <blinkingLeds+0x58>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d003      	beq.n	800114e <blinkingLeds+0x22>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d009      	beq.n	8001160 <blinkingLeds+0x34>
            HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
            HAL_GPIO_TogglePin(GREEN_2_GPIO_Port, GREEN_2_Pin);
            break;

        default:
            break;
 800114c:	e01a      	b.n	8001184 <blinkingLeds+0x58>
            HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 800114e:	2101      	movs	r1, #1
 8001150:	480f      	ldr	r0, [pc, #60]	@ (8001190 <blinkingLeds+0x64>)
 8001152:	f000 fda0 	bl	8001c96 <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(RED_2_GPIO_Port, RED_2_Pin);
 8001156:	2108      	movs	r1, #8
 8001158:	480d      	ldr	r0, [pc, #52]	@ (8001190 <blinkingLeds+0x64>)
 800115a:	f000 fd9c 	bl	8001c96 <HAL_GPIO_TogglePin>
            break;
 800115e:	e012      	b.n	8001186 <blinkingLeds+0x5a>
            HAL_GPIO_TogglePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin);
 8001160:	2102      	movs	r1, #2
 8001162:	480b      	ldr	r0, [pc, #44]	@ (8001190 <blinkingLeds+0x64>)
 8001164:	f000 fd97 	bl	8001c96 <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin);
 8001168:	2110      	movs	r1, #16
 800116a:	4809      	ldr	r0, [pc, #36]	@ (8001190 <blinkingLeds+0x64>)
 800116c:	f000 fd93 	bl	8001c96 <HAL_GPIO_TogglePin>
            break;
 8001170:	e009      	b.n	8001186 <blinkingLeds+0x5a>
            HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
 8001172:	2104      	movs	r1, #4
 8001174:	4806      	ldr	r0, [pc, #24]	@ (8001190 <blinkingLeds+0x64>)
 8001176:	f000 fd8e 	bl	8001c96 <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(GREEN_2_GPIO_Port, GREEN_2_Pin);
 800117a:	2120      	movs	r1, #32
 800117c:	4804      	ldr	r0, [pc, #16]	@ (8001190 <blinkingLeds+0x64>)
 800117e:	f000 fd8a 	bl	8001c96 <HAL_GPIO_TogglePin>
            break;
 8001182:	e000      	b.n	8001186 <blinkingLeds+0x5a>
            break;
 8001184:	bf00      	nop
    }
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40010800 	.word	0x40010800

08001194 <offAllLeds>:

void offAllLeds() {
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 8001198:	2201      	movs	r2, #1
 800119a:	2101      	movs	r1, #1
 800119c:	480e      	ldr	r0, [pc, #56]	@ (80011d8 <offAllLeds+0x44>)
 800119e:	f000 fd62 	bl	8001c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 80011a2:	2201      	movs	r2, #1
 80011a4:	2102      	movs	r1, #2
 80011a6:	480c      	ldr	r0, [pc, #48]	@ (80011d8 <offAllLeds+0x44>)
 80011a8:	f000 fd5d 	bl	8001c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2104      	movs	r1, #4
 80011b0:	4809      	ldr	r0, [pc, #36]	@ (80011d8 <offAllLeds+0x44>)
 80011b2:	f000 fd58 	bl	8001c66 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 80011b6:	2201      	movs	r2, #1
 80011b8:	2108      	movs	r1, #8
 80011ba:	4807      	ldr	r0, [pc, #28]	@ (80011d8 <offAllLeds+0x44>)
 80011bc:	f000 fd53 	bl	8001c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2110      	movs	r1, #16
 80011c4:	4804      	ldr	r0, [pc, #16]	@ (80011d8 <offAllLeds+0x44>)
 80011c6:	f000 fd4e 	bl	8001c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	2120      	movs	r1, #32
 80011ce:	4802      	ldr	r0, [pc, #8]	@ (80011d8 <offAllLeds+0x44>)
 80011d0:	f000 fd49 	bl	8001c66 <HAL_GPIO_WritePin>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40010800 	.word	0x40010800

080011dc <setRed1>:

void setRed1() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2101      	movs	r1, #1
 80011e4:	4807      	ldr	r0, [pc, #28]	@ (8001204 <setRed1+0x28>)
 80011e6:	f000 fd3e 	bl	8001c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2102      	movs	r1, #2
 80011ee:	4805      	ldr	r0, [pc, #20]	@ (8001204 <setRed1+0x28>)
 80011f0:	f000 fd39 	bl	8001c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	2104      	movs	r1, #4
 80011f8:	4802      	ldr	r0, [pc, #8]	@ (8001204 <setRed1+0x28>)
 80011fa:	f000 fd34 	bl	8001c66 <HAL_GPIO_WritePin>
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40010800 	.word	0x40010800

08001208 <setYellow1>:
void setYellow1() {
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2101      	movs	r1, #1
 8001210:	4807      	ldr	r0, [pc, #28]	@ (8001230 <setYellow1+0x28>)
 8001212:	f000 fd28 	bl	8001c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2102      	movs	r1, #2
 800121a:	4805      	ldr	r0, [pc, #20]	@ (8001230 <setYellow1+0x28>)
 800121c:	f000 fd23 	bl	8001c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 8001220:	2201      	movs	r2, #1
 8001222:	2104      	movs	r1, #4
 8001224:	4802      	ldr	r0, [pc, #8]	@ (8001230 <setYellow1+0x28>)
 8001226:	f000 fd1e 	bl	8001c66 <HAL_GPIO_WritePin>
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40010800 	.word	0x40010800

08001234 <setGreen1>:
void setGreen1() {
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 8001238:	2201      	movs	r2, #1
 800123a:	2101      	movs	r1, #1
 800123c:	4807      	ldr	r0, [pc, #28]	@ (800125c <setGreen1+0x28>)
 800123e:	f000 fd12 	bl	8001c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 8001242:	2201      	movs	r2, #1
 8001244:	2102      	movs	r1, #2
 8001246:	4805      	ldr	r0, [pc, #20]	@ (800125c <setGreen1+0x28>)
 8001248:	f000 fd0d 	bl	8001c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	2104      	movs	r1, #4
 8001250:	4802      	ldr	r0, [pc, #8]	@ (800125c <setGreen1+0x28>)
 8001252:	f000 fd08 	bl	8001c66 <HAL_GPIO_WritePin>
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40010800 	.word	0x40010800

08001260 <setRed2>:

void setRed2() {
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2108      	movs	r1, #8
 8001268:	4807      	ldr	r0, [pc, #28]	@ (8001288 <setRed2+0x28>)
 800126a:	f000 fcfc 	bl	8001c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 800126e:	2201      	movs	r2, #1
 8001270:	2110      	movs	r1, #16
 8001272:	4805      	ldr	r0, [pc, #20]	@ (8001288 <setRed2+0x28>)
 8001274:	f000 fcf7 	bl	8001c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET);
 8001278:	2201      	movs	r2, #1
 800127a:	2120      	movs	r1, #32
 800127c:	4802      	ldr	r0, [pc, #8]	@ (8001288 <setRed2+0x28>)
 800127e:	f000 fcf2 	bl	8001c66 <HAL_GPIO_WritePin>
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40010800 	.word	0x40010800

0800128c <setYellow2>:
void setYellow2() {
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8001290:	2201      	movs	r2, #1
 8001292:	2108      	movs	r1, #8
 8001294:	4807      	ldr	r0, [pc, #28]	@ (80012b4 <setYellow2+0x28>)
 8001296:	f000 fce6 	bl	8001c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2110      	movs	r1, #16
 800129e:	4805      	ldr	r0, [pc, #20]	@ (80012b4 <setYellow2+0x28>)
 80012a0:	f000 fce1 	bl	8001c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	2120      	movs	r1, #32
 80012a8:	4802      	ldr	r0, [pc, #8]	@ (80012b4 <setYellow2+0x28>)
 80012aa:	f000 fcdc 	bl	8001c66 <HAL_GPIO_WritePin>
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40010800 	.word	0x40010800

080012b8 <setGreen2>:
void setGreen2() {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	2108      	movs	r1, #8
 80012c0:	4807      	ldr	r0, [pc, #28]	@ (80012e0 <setGreen2+0x28>)
 80012c2:	f000 fcd0 	bl	8001c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	2110      	movs	r1, #16
 80012ca:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <setGreen2+0x28>)
 80012cc:	f000 fccb 	bl	8001c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2120      	movs	r1, #32
 80012d4:	4802      	ldr	r0, [pc, #8]	@ (80012e0 <setGreen2+0x28>)
 80012d6:	f000 fcc6 	bl	8001c66 <HAL_GPIO_WritePin>
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40010800 	.word	0x40010800

080012e4 <trafficRun>:
#include "traffic_process.h"

int segOrder;
int setTime;

void trafficRun() {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	//traffic system works as 4 modes
	switch (mode) {
 80012e8:	4b95      	ldr	r3, [pc, #596]	@ (8001540 <trafficRun+0x25c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	f200 817a 	bhi.w	80015e6 <trafficRun+0x302>
 80012f2:	a201      	add	r2, pc, #4	@ (adr r2, 80012f8 <trafficRun+0x14>)
 80012f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f8:	0800130d 	.word	0x0800130d
 80012fc:	08001327 	.word	0x08001327
 8001300:	080013a9 	.word	0x080013a9
 8001304:	08001461 	.word	0x08001461
 8001308:	08001517 	.word	0x08001517
	//Init mode, in here we preset all values then change to MODE1
	case INIT: {
		segOrder = 2;
 800130c:	4b8d      	ldr	r3, [pc, #564]	@ (8001544 <trafficRun+0x260>)
 800130e:	2202      	movs	r2, #2
 8001310:	601a      	str	r2, [r3, #0]
		segRun1();
 8001312:	f7ff fc1b 	bl	8000b4c <segRun1>
		setTimer2(500);
 8001316:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800131a:	f7ff fe9f 	bl	800105c <setTimer2>
		mode = MODE1;
 800131e:	4b88      	ldr	r3, [pc, #544]	@ (8001540 <trafficRun+0x25c>)
 8001320:	2201      	movs	r2, #1
 8001322:	601a      	str	r2, [r3, #0]
		break;
 8001324:	e168      	b.n	80015f8 <trafficRun+0x314>
	}
	case MODE1: {
		//In MODE1, we have 2 traffic systems to control
		normalMode();
 8001326:	f7ff fd3d 	bl	8000da4 <normalMode>
		if (timer2_flag == 1) {
 800132a:	4b87      	ldr	r3, [pc, #540]	@ (8001548 <trafficRun+0x264>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d11e      	bne.n	8001370 <trafficRun+0x8c>
			setTimer2(500);
 8001332:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001336:	f7ff fe91 	bl	800105c <setTimer2>
			if (segOrder == 2) {
 800133a:	4b82      	ldr	r3, [pc, #520]	@ (8001544 <trafficRun+0x260>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d10f      	bne.n	8001362 <trafficRun+0x7e>
				segRun2();
 8001342:	f7ff fc17 	bl	8000b74 <segRun2>
				segValueTime--;
 8001346:	4b81      	ldr	r3, [pc, #516]	@ (800154c <trafficRun+0x268>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	3b01      	subs	r3, #1
 800134c:	4a7f      	ldr	r2, [pc, #508]	@ (800154c <trafficRun+0x268>)
 800134e:	6013      	str	r3, [r2, #0]
				segModeTime--;
 8001350:	4b7f      	ldr	r3, [pc, #508]	@ (8001550 <trafficRun+0x26c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3b01      	subs	r3, #1
 8001356:	4a7e      	ldr	r2, [pc, #504]	@ (8001550 <trafficRun+0x26c>)
 8001358:	6013      	str	r3, [r2, #0]
				segOrder = 0;
 800135a:	4b7a      	ldr	r3, [pc, #488]	@ (8001544 <trafficRun+0x260>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	e001      	b.n	8001366 <trafficRun+0x82>
			} else {
				segRun1();
 8001362:	f7ff fbf3 	bl	8000b4c <segRun1>
			}
			segOrder++;
 8001366:	4b77      	ldr	r3, [pc, #476]	@ (8001544 <trafficRun+0x260>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	4a75      	ldr	r2, [pc, #468]	@ (8001544 <trafficRun+0x260>)
 800136e:	6013      	str	r3, [r2, #0]
		}
		//if we press button 1, system will change to MODE2
		if (isButtonPressed(BUTTON_1) == 1) {
 8001370:	2000      	movs	r0, #0
 8001372:	f7fe feeb 	bl	800014c <isButtonPressed>
 8001376:	4603      	mov	r3, r0
 8001378:	2b01      	cmp	r3, #1
 800137a:	f040 8136 	bne.w	80015ea <trafficRun+0x306>
			setTimer2(500);
 800137e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001382:	f7ff fe6b 	bl	800105c <setTimer2>
			setTime = redTime;
 8001386:	4b73      	ldr	r3, [pc, #460]	@ (8001554 <trafficRun+0x270>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a73      	ldr	r2, [pc, #460]	@ (8001558 <trafficRun+0x274>)
 800138c:	6013      	str	r3, [r2, #0]
			segModeTime = MODE2;
 800138e:	4b70      	ldr	r3, [pc, #448]	@ (8001550 <trafficRun+0x26c>)
 8001390:	2202      	movs	r2, #2
 8001392:	601a      	str	r2, [r3, #0]
			segValueTime = redTime;
 8001394:	4b6f      	ldr	r3, [pc, #444]	@ (8001554 <trafficRun+0x270>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a6c      	ldr	r2, [pc, #432]	@ (800154c <trafficRun+0x268>)
 800139a:	6013      	str	r3, [r2, #0]
			mode = MODE2;
 800139c:	4b68      	ldr	r3, [pc, #416]	@ (8001540 <trafficRun+0x25c>)
 800139e:	2202      	movs	r2, #2
 80013a0:	601a      	str	r2, [r3, #0]
			offAllLeds();
 80013a2:	f7ff fef7 	bl	8001194 <offAllLeds>
		}
		break;
 80013a6:	e120      	b.n	80015ea <trafficRun+0x306>
	}
	case MODE2: {
		//In MODE2, we use button 2 and 3 to adjust duration of red light
		if (timer2_flag == 1) {
 80013a8:	4b67      	ldr	r3, [pc, #412]	@ (8001548 <trafficRun+0x264>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d117      	bne.n	80013e0 <trafficRun+0xfc>
			setTimer2(500);
 80013b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013b4:	f7ff fe52 	bl	800105c <setTimer2>
			blinkingLeds(MODE2);
 80013b8:	2002      	movs	r0, #2
 80013ba:	f7ff feb7 	bl	800112c <blinkingLeds>
			if (segOrder == 2) {
 80013be:	4b61      	ldr	r3, [pc, #388]	@ (8001544 <trafficRun+0x260>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d105      	bne.n	80013d2 <trafficRun+0xee>
				segRun2();
 80013c6:	f7ff fbd5 	bl	8000b74 <segRun2>
				segOrder = 0;
 80013ca:	4b5e      	ldr	r3, [pc, #376]	@ (8001544 <trafficRun+0x260>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	e001      	b.n	80013d6 <trafficRun+0xf2>
			} else {
				segRun1();
 80013d2:	f7ff fbbb 	bl	8000b4c <segRun1>
			}
			segOrder++;
 80013d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001544 <trafficRun+0x260>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	4a59      	ldr	r2, [pc, #356]	@ (8001544 <trafficRun+0x260>)
 80013de:	6013      	str	r3, [r2, #0]
		}
		//if we press button 1, system will change to MODE3
		if (isButtonPressed(BUTTON_1) == 1) {
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7fe feb3 	bl	800014c <isButtonPressed>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d113      	bne.n	8001414 <trafficRun+0x130>
			setTimer2(500);
 80013ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013f0:	f7ff fe34 	bl	800105c <setTimer2>
			setTime = yellowTime;
 80013f4:	4b59      	ldr	r3, [pc, #356]	@ (800155c <trafficRun+0x278>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a57      	ldr	r2, [pc, #348]	@ (8001558 <trafficRun+0x274>)
 80013fa:	6013      	str	r3, [r2, #0]
			segModeTime = MODE3;
 80013fc:	4b54      	ldr	r3, [pc, #336]	@ (8001550 <trafficRun+0x26c>)
 80013fe:	2203      	movs	r2, #3
 8001400:	601a      	str	r2, [r3, #0]
			segValueTime = yellowTime;
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <trafficRun+0x278>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a51      	ldr	r2, [pc, #324]	@ (800154c <trafficRun+0x268>)
 8001408:	6013      	str	r3, [r2, #0]
			mode = MODE3;
 800140a:	4b4d      	ldr	r3, [pc, #308]	@ (8001540 <trafficRun+0x25c>)
 800140c:	2203      	movs	r2, #3
 800140e:	601a      	str	r2, [r3, #0]
			offAllLeds();
 8001410:	f7ff fec0 	bl	8001194 <offAllLeds>
		}
		//if we press button 2, duration of red light will increase 1s
		if (isButtonPressed(BUTTON_2) == 1) {
 8001414:	2001      	movs	r0, #1
 8001416:	f7fe fe99 	bl	800014c <isButtonPressed>
 800141a:	4603      	mov	r3, r0
 800141c:	2b01      	cmp	r3, #1
 800141e:	d10f      	bne.n	8001440 <trafficRun+0x15c>
			if (setTime > 99) {
 8001420:	4b4d      	ldr	r3, [pc, #308]	@ (8001558 <trafficRun+0x274>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b63      	cmp	r3, #99	@ 0x63
 8001426:	dd02      	ble.n	800142e <trafficRun+0x14a>
				setTime = 1;
 8001428:	4b4b      	ldr	r3, [pc, #300]	@ (8001558 <trafficRun+0x274>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]
			}
			setTime++;
 800142e:	4b4a      	ldr	r3, [pc, #296]	@ (8001558 <trafficRun+0x274>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	4a48      	ldr	r2, [pc, #288]	@ (8001558 <trafficRun+0x274>)
 8001436:	6013      	str	r3, [r2, #0]
			segValueTime = setTime;
 8001438:	4b47      	ldr	r3, [pc, #284]	@ (8001558 <trafficRun+0x274>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a43      	ldr	r2, [pc, #268]	@ (800154c <trafficRun+0x268>)
 800143e:	6013      	str	r3, [r2, #0]
		}
		//if we press button 3, system will save the change to red light
		if (isButtonPressed(BUTTON_3) == 1) {
 8001440:	2002      	movs	r0, #2
 8001442:	f7fe fe83 	bl	800014c <isButtonPressed>
 8001446:	4603      	mov	r3, r0
 8001448:	2b01      	cmp	r3, #1
 800144a:	f040 80d0 	bne.w	80015ee <trafficRun+0x30a>
			redTime = setTime;
 800144e:	4b42      	ldr	r3, [pc, #264]	@ (8001558 <trafficRun+0x274>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a40      	ldr	r2, [pc, #256]	@ (8001554 <trafficRun+0x270>)
 8001454:	6013      	str	r3, [r2, #0]
			segValueTime = redTime;
 8001456:	4b3f      	ldr	r3, [pc, #252]	@ (8001554 <trafficRun+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a3c      	ldr	r2, [pc, #240]	@ (800154c <trafficRun+0x268>)
 800145c:	6013      	str	r3, [r2, #0]
		}
		break;
 800145e:	e0c6      	b.n	80015ee <trafficRun+0x30a>
		//MODE3 is similar to MODE2
	}
	case MODE3: {
		if (timer2_flag == 1) {
 8001460:	4b39      	ldr	r3, [pc, #228]	@ (8001548 <trafficRun+0x264>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d117      	bne.n	8001498 <trafficRun+0x1b4>
			setTimer2(500);
 8001468:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800146c:	f7ff fdf6 	bl	800105c <setTimer2>
			blinkingLeds(MODE3);
 8001470:	2003      	movs	r0, #3
 8001472:	f7ff fe5b 	bl	800112c <blinkingLeds>
			if (segOrder == 2) {
 8001476:	4b33      	ldr	r3, [pc, #204]	@ (8001544 <trafficRun+0x260>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d105      	bne.n	800148a <trafficRun+0x1a6>
				segRun2();
 800147e:	f7ff fb79 	bl	8000b74 <segRun2>
				segOrder = 0;
 8001482:	4b30      	ldr	r3, [pc, #192]	@ (8001544 <trafficRun+0x260>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e001      	b.n	800148e <trafficRun+0x1aa>
			} else {
				segRun1();
 800148a:	f7ff fb5f 	bl	8000b4c <segRun1>
			}
			segOrder++;
 800148e:	4b2d      	ldr	r3, [pc, #180]	@ (8001544 <trafficRun+0x260>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3301      	adds	r3, #1
 8001494:	4a2b      	ldr	r2, [pc, #172]	@ (8001544 <trafficRun+0x260>)
 8001496:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(BUTTON_1) == 1) {
 8001498:	2000      	movs	r0, #0
 800149a:	f7fe fe57 	bl	800014c <isButtonPressed>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d113      	bne.n	80014cc <trafficRun+0x1e8>
			setTimer2(500);
 80014a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014a8:	f7ff fdd8 	bl	800105c <setTimer2>
			setTime = greenTime;
 80014ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001560 <trafficRun+0x27c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a29      	ldr	r2, [pc, #164]	@ (8001558 <trafficRun+0x274>)
 80014b2:	6013      	str	r3, [r2, #0]
			segModeTime = MODE4;
 80014b4:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <trafficRun+0x26c>)
 80014b6:	2204      	movs	r2, #4
 80014b8:	601a      	str	r2, [r3, #0]
			segValueTime = greenTime;
 80014ba:	4b29      	ldr	r3, [pc, #164]	@ (8001560 <trafficRun+0x27c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a23      	ldr	r2, [pc, #140]	@ (800154c <trafficRun+0x268>)
 80014c0:	6013      	str	r3, [r2, #0]
			mode = MODE4;
 80014c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <trafficRun+0x25c>)
 80014c4:	2204      	movs	r2, #4
 80014c6:	601a      	str	r2, [r3, #0]
			offAllLeds();
 80014c8:	f7ff fe64 	bl	8001194 <offAllLeds>
		}
		if (isButtonPressed(BUTTON_2) == 1) {
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7fe fe3d 	bl	800014c <isButtonPressed>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d10f      	bne.n	80014f8 <trafficRun+0x214>
			if (setTime > 99) {
 80014d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <trafficRun+0x274>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b63      	cmp	r3, #99	@ 0x63
 80014de:	dd02      	ble.n	80014e6 <trafficRun+0x202>
				setTime = 1;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <trafficRun+0x274>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]
			}
			setTime++;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <trafficRun+0x274>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001558 <trafficRun+0x274>)
 80014ee:	6013      	str	r3, [r2, #0]
			segValueTime = setTime;
 80014f0:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <trafficRun+0x274>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a15      	ldr	r2, [pc, #84]	@ (800154c <trafficRun+0x268>)
 80014f6:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(BUTTON_3) == 1) {
 80014f8:	2002      	movs	r0, #2
 80014fa:	f7fe fe27 	bl	800014c <isButtonPressed>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b01      	cmp	r3, #1
 8001502:	d176      	bne.n	80015f2 <trafficRun+0x30e>
			yellowTime = setTime;
 8001504:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <trafficRun+0x274>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a14      	ldr	r2, [pc, #80]	@ (800155c <trafficRun+0x278>)
 800150a:	6013      	str	r3, [r2, #0]
			segValueTime = yellowTime;
 800150c:	4b13      	ldr	r3, [pc, #76]	@ (800155c <trafficRun+0x278>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0e      	ldr	r2, [pc, #56]	@ (800154c <trafficRun+0x268>)
 8001512:	6013      	str	r3, [r2, #0]
		}
		break;
 8001514:	e06d      	b.n	80015f2 <trafficRun+0x30e>
		//MODE4 is similar to MODE1
	}
	case MODE4: {
		if (timer2_flag == 1) {
 8001516:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <trafficRun+0x264>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d129      	bne.n	8001572 <trafficRun+0x28e>
			setTimer2(500);
 800151e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001522:	f7ff fd9b 	bl	800105c <setTimer2>
			blinkingLeds(MODE4);
 8001526:	2004      	movs	r0, #4
 8001528:	f7ff fe00 	bl	800112c <blinkingLeds>
			if (segOrder == 2) {
 800152c:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <trafficRun+0x260>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d117      	bne.n	8001564 <trafficRun+0x280>
				segRun2();
 8001534:	f7ff fb1e 	bl	8000b74 <segRun2>
				segOrder = 0;
 8001538:	4b02      	ldr	r3, [pc, #8]	@ (8001544 <trafficRun+0x260>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	e013      	b.n	8001568 <trafficRun+0x284>
 8001540:	20000070 	.word	0x20000070
 8001544:	200000ec 	.word	0x200000ec
 8001548:	200000dc 	.word	0x200000dc
 800154c:	20000088 	.word	0x20000088
 8001550:	20000084 	.word	0x20000084
 8001554:	20000080 	.word	0x20000080
 8001558:	200000f0 	.word	0x200000f0
 800155c:	20000078 	.word	0x20000078
 8001560:	2000007c 	.word	0x2000007c
			} else {
				segRun1();
 8001564:	f7ff faf2 	bl	8000b4c <segRun1>
			}
			segOrder++;
 8001568:	4b24      	ldr	r3, [pc, #144]	@ (80015fc <trafficRun+0x318>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	4a23      	ldr	r2, [pc, #140]	@ (80015fc <trafficRun+0x318>)
 8001570:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(BUTTON_1) == 1) {
 8001572:	2000      	movs	r0, #0
 8001574:	f7fe fdea 	bl	800014c <isButtonPressed>
 8001578:	4603      	mov	r3, r0
 800157a:	2b01      	cmp	r3, #1
 800157c:	d10e      	bne.n	800159c <trafficRun+0x2b8>
			nmode = init;
 800157e:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <trafficRun+0x31c>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
			segOrder = 2;
 8001584:	4b1d      	ldr	r3, [pc, #116]	@ (80015fc <trafficRun+0x318>)
 8001586:	2202      	movs	r2, #2
 8001588:	601a      	str	r2, [r3, #0]
			segRun1();
 800158a:	f7ff fadf 	bl	8000b4c <segRun1>
			setTimer2(500);
 800158e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001592:	f7ff fd63 	bl	800105c <setTimer2>
			mode = MODE1;
 8001596:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <trafficRun+0x320>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(BUTTON_2) == 1) {
 800159c:	2001      	movs	r0, #1
 800159e:	f7fe fdd5 	bl	800014c <isButtonPressed>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d10f      	bne.n	80015c8 <trafficRun+0x2e4>
			if (setTime > 99) {
 80015a8:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <trafficRun+0x324>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b63      	cmp	r3, #99	@ 0x63
 80015ae:	dd02      	ble.n	80015b6 <trafficRun+0x2d2>
				setTime = 1;
 80015b0:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <trafficRun+0x324>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	601a      	str	r2, [r3, #0]
			}
			setTime++;
 80015b6:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <trafficRun+0x324>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	3301      	adds	r3, #1
 80015bc:	4a12      	ldr	r2, [pc, #72]	@ (8001608 <trafficRun+0x324>)
 80015be:	6013      	str	r3, [r2, #0]
			segValueTime = setTime;
 80015c0:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <trafficRun+0x324>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a11      	ldr	r2, [pc, #68]	@ (800160c <trafficRun+0x328>)
 80015c6:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(BUTTON_3) == 1) {
 80015c8:	2002      	movs	r0, #2
 80015ca:	f7fe fdbf 	bl	800014c <isButtonPressed>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d110      	bne.n	80015f6 <trafficRun+0x312>
			greenTime = setTime;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <trafficRun+0x324>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001610 <trafficRun+0x32c>)
 80015da:	6013      	str	r3, [r2, #0]
			segValueTime = greenTime;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <trafficRun+0x32c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <trafficRun+0x328>)
 80015e2:	6013      	str	r3, [r2, #0]
		}
		break;
 80015e4:	e007      	b.n	80015f6 <trafficRun+0x312>
	}
	default:
		break;
 80015e6:	bf00      	nop
 80015e8:	e006      	b.n	80015f8 <trafficRun+0x314>
		break;
 80015ea:	bf00      	nop
 80015ec:	e004      	b.n	80015f8 <trafficRun+0x314>
		break;
 80015ee:	bf00      	nop
 80015f0:	e002      	b.n	80015f8 <trafficRun+0x314>
		break;
 80015f2:	bf00      	nop
 80015f4:	e000      	b.n	80015f8 <trafficRun+0x314>
		break;
 80015f6:	bf00      	nop
	}
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200000ec 	.word	0x200000ec
 8001600:	20000074 	.word	0x20000074
 8001604:	20000070 	.word	0x20000070
 8001608:	200000f0 	.word	0x200000f0
 800160c:	20000088 	.word	0x20000088
 8001610:	2000007c 	.word	0x2000007c

08001614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001614:	f7ff fd00 	bl	8001018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001618:	480b      	ldr	r0, [pc, #44]	@ (8001648 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800161a:	490c      	ldr	r1, [pc, #48]	@ (800164c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800161c:	4a0c      	ldr	r2, [pc, #48]	@ (8001650 <LoopFillZerobss+0x16>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a09      	ldr	r2, [pc, #36]	@ (8001654 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001630:	4c09      	ldr	r4, [pc, #36]	@ (8001658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800163e:	f001 fb05 	bl	8002c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001642:	f7ff faab 	bl	8000b9c <main>
  bx lr
 8001646:	4770      	bx	lr
  ldr r0, =_sdata
 8001648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800164c:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001650:	08002cd8 	.word	0x08002cd8
  ldr r2, =_sbss
 8001654:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001658:	200000f8 	.word	0x200000f8

0800165c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC1_2_IRQHandler>
	...

08001660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001664:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <HAL_Init+0x28>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a07      	ldr	r2, [pc, #28]	@ (8001688 <HAL_Init+0x28>)
 800166a:	f043 0310 	orr.w	r3, r3, #16
 800166e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001670:	2003      	movs	r0, #3
 8001672:	f000 f923 	bl	80018bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001676:	200f      	movs	r0, #15
 8001678:	f000 f808 	bl	800168c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800167c:	f7ff fc40 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40022000 	.word	0x40022000

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <HAL_InitTick+0x54>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <HAL_InitTick+0x58>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f93b 	bl	8001926 <HAL_SYSTICK_Config>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00e      	b.n	80016d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b0f      	cmp	r3, #15
 80016be:	d80a      	bhi.n	80016d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c0:	2200      	movs	r2, #0
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f000 f903 	bl	80018d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016cc:	4a06      	ldr	r2, [pc, #24]	@ (80016e8 <HAL_InitTick+0x5c>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e000      	b.n	80016d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000030 	.word	0x20000030
 80016e4:	20000038 	.word	0x20000038
 80016e8:	20000034 	.word	0x20000034

080016ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <HAL_IncTick+0x1c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b05      	ldr	r3, [pc, #20]	@ (800170c <HAL_IncTick+0x20>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a03      	ldr	r2, [pc, #12]	@ (800170c <HAL_IncTick+0x20>)
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	20000038 	.word	0x20000038
 800170c:	200000f4 	.word	0x200000f4

08001710 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b02      	ldr	r3, [pc, #8]	@ (8001720 <HAL_GetTick+0x10>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	200000f4 	.word	0x200000f4

08001724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001734:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800174c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001756:	4a04      	ldr	r2, [pc, #16]	@ (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	60d3      	str	r3, [r2, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001770:	4b04      	ldr	r3, [pc, #16]	@ (8001784 <__NVIC_GetPriorityGrouping+0x18>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	f003 0307 	and.w	r3, r3, #7
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	2b00      	cmp	r3, #0
 8001798:	db0b      	blt.n	80017b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	f003 021f 	and.w	r2, r3, #31
 80017a0:	4906      	ldr	r1, [pc, #24]	@ (80017bc <__NVIC_EnableIRQ+0x34>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	2001      	movs	r0, #1
 80017aa:	fa00 f202 	lsl.w	r2, r0, r2
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	e000e100 	.word	0xe000e100

080017c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	6039      	str	r1, [r7, #0]
 80017ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	db0a      	blt.n	80017ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	490c      	ldr	r1, [pc, #48]	@ (800180c <__NVIC_SetPriority+0x4c>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	0112      	lsls	r2, r2, #4
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	440b      	add	r3, r1
 80017e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e8:	e00a      	b.n	8001800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4908      	ldr	r1, [pc, #32]	@ (8001810 <__NVIC_SetPriority+0x50>)
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	3b04      	subs	r3, #4
 80017f8:	0112      	lsls	r2, r2, #4
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	440b      	add	r3, r1
 80017fe:	761a      	strb	r2, [r3, #24]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000e100 	.word	0xe000e100
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001814:	b480      	push	{r7}
 8001816:	b089      	sub	sp, #36	@ 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f1c3 0307 	rsb	r3, r3, #7
 800182e:	2b04      	cmp	r3, #4
 8001830:	bf28      	it	cs
 8001832:	2304      	movcs	r3, #4
 8001834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3304      	adds	r3, #4
 800183a:	2b06      	cmp	r3, #6
 800183c:	d902      	bls.n	8001844 <NVIC_EncodePriority+0x30>
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3b03      	subs	r3, #3
 8001842:	e000      	b.n	8001846 <NVIC_EncodePriority+0x32>
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	f04f 32ff 	mov.w	r2, #4294967295
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43da      	mvns	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	401a      	ands	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800185c:	f04f 31ff 	mov.w	r1, #4294967295
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	43d9      	mvns	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	4313      	orrs	r3, r2
         );
}
 800186e:	4618      	mov	r0, r3
 8001870:	3724      	adds	r7, #36	@ 0x24
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001888:	d301      	bcc.n	800188e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188a:	2301      	movs	r3, #1
 800188c:	e00f      	b.n	80018ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188e:	4a0a      	ldr	r2, [pc, #40]	@ (80018b8 <SysTick_Config+0x40>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3b01      	subs	r3, #1
 8001894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001896:	210f      	movs	r1, #15
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f7ff ff90 	bl	80017c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <SysTick_Config+0x40>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a6:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <SysTick_Config+0x40>)
 80018a8:	2207      	movs	r2, #7
 80018aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	e000e010 	.word	0xe000e010

080018bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ff2d 	bl	8001724 <__NVIC_SetPriorityGrouping>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e4:	f7ff ff42 	bl	800176c <__NVIC_GetPriorityGrouping>
 80018e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	6978      	ldr	r0, [r7, #20]
 80018f0:	f7ff ff90 	bl	8001814 <NVIC_EncodePriority>
 80018f4:	4602      	mov	r2, r0
 80018f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff5f 	bl	80017c0 <__NVIC_SetPriority>
}
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff35 	bl	8001788 <__NVIC_EnableIRQ>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ffa2 	bl	8001878 <SysTick_Config>
 8001934:	4603      	mov	r3, r0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001940:	b480      	push	{r7}
 8001942:	b08b      	sub	sp, #44	@ 0x2c
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001952:	e161      	b.n	8001c18 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001954:	2201      	movs	r2, #1
 8001956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	429a      	cmp	r2, r3
 800196e:	f040 8150 	bne.w	8001c12 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4a97      	ldr	r2, [pc, #604]	@ (8001bd4 <HAL_GPIO_Init+0x294>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d05e      	beq.n	8001a3a <HAL_GPIO_Init+0xfa>
 800197c:	4a95      	ldr	r2, [pc, #596]	@ (8001bd4 <HAL_GPIO_Init+0x294>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d875      	bhi.n	8001a6e <HAL_GPIO_Init+0x12e>
 8001982:	4a95      	ldr	r2, [pc, #596]	@ (8001bd8 <HAL_GPIO_Init+0x298>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d058      	beq.n	8001a3a <HAL_GPIO_Init+0xfa>
 8001988:	4a93      	ldr	r2, [pc, #588]	@ (8001bd8 <HAL_GPIO_Init+0x298>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d86f      	bhi.n	8001a6e <HAL_GPIO_Init+0x12e>
 800198e:	4a93      	ldr	r2, [pc, #588]	@ (8001bdc <HAL_GPIO_Init+0x29c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d052      	beq.n	8001a3a <HAL_GPIO_Init+0xfa>
 8001994:	4a91      	ldr	r2, [pc, #580]	@ (8001bdc <HAL_GPIO_Init+0x29c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d869      	bhi.n	8001a6e <HAL_GPIO_Init+0x12e>
 800199a:	4a91      	ldr	r2, [pc, #580]	@ (8001be0 <HAL_GPIO_Init+0x2a0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d04c      	beq.n	8001a3a <HAL_GPIO_Init+0xfa>
 80019a0:	4a8f      	ldr	r2, [pc, #572]	@ (8001be0 <HAL_GPIO_Init+0x2a0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d863      	bhi.n	8001a6e <HAL_GPIO_Init+0x12e>
 80019a6:	4a8f      	ldr	r2, [pc, #572]	@ (8001be4 <HAL_GPIO_Init+0x2a4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d046      	beq.n	8001a3a <HAL_GPIO_Init+0xfa>
 80019ac:	4a8d      	ldr	r2, [pc, #564]	@ (8001be4 <HAL_GPIO_Init+0x2a4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d85d      	bhi.n	8001a6e <HAL_GPIO_Init+0x12e>
 80019b2:	2b12      	cmp	r3, #18
 80019b4:	d82a      	bhi.n	8001a0c <HAL_GPIO_Init+0xcc>
 80019b6:	2b12      	cmp	r3, #18
 80019b8:	d859      	bhi.n	8001a6e <HAL_GPIO_Init+0x12e>
 80019ba:	a201      	add	r2, pc, #4	@ (adr r2, 80019c0 <HAL_GPIO_Init+0x80>)
 80019bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c0:	08001a3b 	.word	0x08001a3b
 80019c4:	08001a15 	.word	0x08001a15
 80019c8:	08001a27 	.word	0x08001a27
 80019cc:	08001a69 	.word	0x08001a69
 80019d0:	08001a6f 	.word	0x08001a6f
 80019d4:	08001a6f 	.word	0x08001a6f
 80019d8:	08001a6f 	.word	0x08001a6f
 80019dc:	08001a6f 	.word	0x08001a6f
 80019e0:	08001a6f 	.word	0x08001a6f
 80019e4:	08001a6f 	.word	0x08001a6f
 80019e8:	08001a6f 	.word	0x08001a6f
 80019ec:	08001a6f 	.word	0x08001a6f
 80019f0:	08001a6f 	.word	0x08001a6f
 80019f4:	08001a6f 	.word	0x08001a6f
 80019f8:	08001a6f 	.word	0x08001a6f
 80019fc:	08001a6f 	.word	0x08001a6f
 8001a00:	08001a6f 	.word	0x08001a6f
 8001a04:	08001a1d 	.word	0x08001a1d
 8001a08:	08001a31 	.word	0x08001a31
 8001a0c:	4a76      	ldr	r2, [pc, #472]	@ (8001be8 <HAL_GPIO_Init+0x2a8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d013      	beq.n	8001a3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a12:	e02c      	b.n	8001a6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	623b      	str	r3, [r7, #32]
          break;
 8001a1a:	e029      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	3304      	adds	r3, #4
 8001a22:	623b      	str	r3, [r7, #32]
          break;
 8001a24:	e024      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	3308      	adds	r3, #8
 8001a2c:	623b      	str	r3, [r7, #32]
          break;
 8001a2e:	e01f      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	330c      	adds	r3, #12
 8001a36:	623b      	str	r3, [r7, #32]
          break;
 8001a38:	e01a      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a42:	2304      	movs	r3, #4
 8001a44:	623b      	str	r3, [r7, #32]
          break;
 8001a46:	e013      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d105      	bne.n	8001a5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a50:	2308      	movs	r3, #8
 8001a52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	611a      	str	r2, [r3, #16]
          break;
 8001a5a:	e009      	b.n	8001a70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	615a      	str	r2, [r3, #20]
          break;
 8001a66:	e003      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
          break;
 8001a6c:	e000      	b.n	8001a70 <HAL_GPIO_Init+0x130>
          break;
 8001a6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2bff      	cmp	r3, #255	@ 0xff
 8001a74:	d801      	bhi.n	8001a7a <HAL_GPIO_Init+0x13a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	e001      	b.n	8001a7e <HAL_GPIO_Init+0x13e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2bff      	cmp	r3, #255	@ 0xff
 8001a84:	d802      	bhi.n	8001a8c <HAL_GPIO_Init+0x14c>
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	e002      	b.n	8001a92 <HAL_GPIO_Init+0x152>
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	3b08      	subs	r3, #8
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	210f      	movs	r1, #15
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	6a39      	ldr	r1, [r7, #32]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aac:	431a      	orrs	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 80a9 	beq.w	8001c12 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac0:	4b4a      	ldr	r3, [pc, #296]	@ (8001bec <HAL_GPIO_Init+0x2ac>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	4a49      	ldr	r2, [pc, #292]	@ (8001bec <HAL_GPIO_Init+0x2ac>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6193      	str	r3, [r2, #24]
 8001acc:	4b47      	ldr	r3, [pc, #284]	@ (8001bec <HAL_GPIO_Init+0x2ac>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ad8:	4a45      	ldr	r2, [pc, #276]	@ (8001bf0 <HAL_GPIO_Init+0x2b0>)
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	089b      	lsrs	r3, r3, #2
 8001ade:	3302      	adds	r3, #2
 8001ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	220f      	movs	r2, #15
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4013      	ands	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a3d      	ldr	r2, [pc, #244]	@ (8001bf4 <HAL_GPIO_Init+0x2b4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00d      	beq.n	8001b20 <HAL_GPIO_Init+0x1e0>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a3c      	ldr	r2, [pc, #240]	@ (8001bf8 <HAL_GPIO_Init+0x2b8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d007      	beq.n	8001b1c <HAL_GPIO_Init+0x1dc>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a3b      	ldr	r2, [pc, #236]	@ (8001bfc <HAL_GPIO_Init+0x2bc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d101      	bne.n	8001b18 <HAL_GPIO_Init+0x1d8>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e004      	b.n	8001b22 <HAL_GPIO_Init+0x1e2>
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e002      	b.n	8001b22 <HAL_GPIO_Init+0x1e2>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_GPIO_Init+0x1e2>
 8001b20:	2300      	movs	r3, #0
 8001b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b24:	f002 0203 	and.w	r2, r2, #3
 8001b28:	0092      	lsls	r2, r2, #2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b32:	492f      	ldr	r1, [pc, #188]	@ (8001bf0 <HAL_GPIO_Init+0x2b0>)
 8001b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d006      	beq.n	8001b5a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c00 <HAL_GPIO_Init+0x2c0>)
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	492b      	ldr	r1, [pc, #172]	@ (8001c00 <HAL_GPIO_Init+0x2c0>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b5a:	4b29      	ldr	r3, [pc, #164]	@ (8001c00 <HAL_GPIO_Init+0x2c0>)
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	4927      	ldr	r1, [pc, #156]	@ (8001c00 <HAL_GPIO_Init+0x2c0>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b74:	4b22      	ldr	r3, [pc, #136]	@ (8001c00 <HAL_GPIO_Init+0x2c0>)
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	4921      	ldr	r1, [pc, #132]	@ (8001c00 <HAL_GPIO_Init+0x2c0>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60cb      	str	r3, [r1, #12]
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b82:	4b1f      	ldr	r3, [pc, #124]	@ (8001c00 <HAL_GPIO_Init+0x2c0>)
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	491d      	ldr	r1, [pc, #116]	@ (8001c00 <HAL_GPIO_Init+0x2c0>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d006      	beq.n	8001baa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b9c:	4b18      	ldr	r3, [pc, #96]	@ (8001c00 <HAL_GPIO_Init+0x2c0>)
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	4917      	ldr	r1, [pc, #92]	@ (8001c00 <HAL_GPIO_Init+0x2c0>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001baa:	4b15      	ldr	r3, [pc, #84]	@ (8001c00 <HAL_GPIO_Init+0x2c0>)
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	4913      	ldr	r1, [pc, #76]	@ (8001c00 <HAL_GPIO_Init+0x2c0>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01f      	beq.n	8001c04 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <HAL_GPIO_Init+0x2c0>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	490d      	ldr	r1, [pc, #52]	@ (8001c00 <HAL_GPIO_Init+0x2c0>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]
 8001bd0:	e01f      	b.n	8001c12 <HAL_GPIO_Init+0x2d2>
 8001bd2:	bf00      	nop
 8001bd4:	10320000 	.word	0x10320000
 8001bd8:	10310000 	.word	0x10310000
 8001bdc:	10220000 	.word	0x10220000
 8001be0:	10210000 	.word	0x10210000
 8001be4:	10120000 	.word	0x10120000
 8001be8:	10110000 	.word	0x10110000
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	40010800 	.word	0x40010800
 8001bf8:	40010c00 	.word	0x40010c00
 8001bfc:	40011000 	.word	0x40011000
 8001c00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c04:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <HAL_GPIO_Init+0x2f4>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	4909      	ldr	r1, [pc, #36]	@ (8001c34 <HAL_GPIO_Init+0x2f4>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	3301      	adds	r3, #1
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f47f ae96 	bne.w	8001954 <HAL_GPIO_Init+0x14>
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	372c      	adds	r7, #44	@ 0x2c
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	40010400 	.word	0x40010400

08001c38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c50:	2301      	movs	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	e001      	b.n	8001c5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	807b      	strh	r3, [r7, #2]
 8001c72:	4613      	mov	r3, r2
 8001c74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c76:	787b      	ldrb	r3, [r7, #1]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7c:	887a      	ldrh	r2, [r7, #2]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c82:	e003      	b.n	8001c8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	041a      	lsls	r2, r3, #16
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	611a      	str	r2, [r3, #16]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b085      	sub	sp, #20
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ca8:	887a      	ldrh	r2, [r7, #2]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4013      	ands	r3, r2
 8001cae:	041a      	lsls	r2, r3, #16
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	43d9      	mvns	r1, r3
 8001cb4:	887b      	ldrh	r3, [r7, #2]
 8001cb6:	400b      	ands	r3, r1
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	611a      	str	r2, [r3, #16]
}
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e272      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8087 	beq.w	8001df6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce8:	4b92      	ldr	r3, [pc, #584]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d00c      	beq.n	8001d0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cf4:	4b8f      	ldr	r3, [pc, #572]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d112      	bne.n	8001d26 <HAL_RCC_OscConfig+0x5e>
 8001d00:	4b8c      	ldr	r3, [pc, #560]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d0c:	d10b      	bne.n	8001d26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0e:	4b89      	ldr	r3, [pc, #548]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d06c      	beq.n	8001df4 <HAL_RCC_OscConfig+0x12c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d168      	bne.n	8001df4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e24c      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_OscConfig+0x76>
 8001d30:	4b80      	ldr	r3, [pc, #512]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a7f      	ldr	r2, [pc, #508]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	e02e      	b.n	8001d9c <HAL_RCC_OscConfig+0xd4>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x98>
 8001d46:	4b7b      	ldr	r3, [pc, #492]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a7a      	ldr	r2, [pc, #488]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4b78      	ldr	r3, [pc, #480]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a77      	ldr	r2, [pc, #476]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e01d      	b.n	8001d9c <HAL_RCC_OscConfig+0xd4>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0xbc>
 8001d6a:	4b72      	ldr	r3, [pc, #456]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a71      	ldr	r2, [pc, #452]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b6f      	ldr	r3, [pc, #444]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a6e      	ldr	r2, [pc, #440]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0xd4>
 8001d84:	4b6b      	ldr	r3, [pc, #428]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a6a      	ldr	r2, [pc, #424]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b68      	ldr	r3, [pc, #416]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a67      	ldr	r2, [pc, #412]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d013      	beq.n	8001dcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff fcb4 	bl	8001710 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff fcb0 	bl	8001710 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	@ 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e200      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b5d      	ldr	r3, [pc, #372]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0xe4>
 8001dca:	e014      	b.n	8001df6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fca0 	bl	8001710 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff fc9c 	bl	8001710 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	@ 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e1ec      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	4b53      	ldr	r3, [pc, #332]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x10c>
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d063      	beq.n	8001eca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e02:	4b4c      	ldr	r3, [pc, #304]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e0e:	4b49      	ldr	r3, [pc, #292]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d11c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x18c>
 8001e1a:	4b46      	ldr	r3, [pc, #280]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d116      	bne.n	8001e54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	4b43      	ldr	r3, [pc, #268]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_RCC_OscConfig+0x176>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e1c0      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4939      	ldr	r1, [pc, #228]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	e03a      	b.n	8001eca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d020      	beq.n	8001e9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e5c:	4b36      	ldr	r3, [pc, #216]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7ff fc55 	bl	8001710 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7ff fc51 	bl	8001710 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e1a1      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	4b2a      	ldr	r3, [pc, #168]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4927      	ldr	r1, [pc, #156]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]
 8001e9c:	e015      	b.n	8001eca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9e:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fc34 	bl	8001710 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eac:	f7ff fc30 	bl	8001710 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e180      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d03a      	beq.n	8001f4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d019      	beq.n	8001f12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ede:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <HAL_RCC_OscConfig+0x274>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee4:	f7ff fc14 	bl	8001710 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eec:	f7ff fc10 	bl	8001710 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e160      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efe:	4b0d      	ldr	r3, [pc, #52]	@ (8001f34 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f000 fa9c 	bl	8002448 <RCC_Delay>
 8001f10:	e01c      	b.n	8001f4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f12:	4b0a      	ldr	r3, [pc, #40]	@ (8001f3c <HAL_RCC_OscConfig+0x274>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f18:	f7ff fbfa 	bl	8001710 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1e:	e00f      	b.n	8001f40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff fbf6 	bl	8001710 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d908      	bls.n	8001f40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e146      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	42420000 	.word	0x42420000
 8001f3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f40:	4b92      	ldr	r3, [pc, #584]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1e9      	bne.n	8001f20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80a6 	beq.w	80020a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5e:	4b8b      	ldr	r3, [pc, #556]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10d      	bne.n	8001f86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	4b88      	ldr	r3, [pc, #544]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a87      	ldr	r2, [pc, #540]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f74:	61d3      	str	r3, [r2, #28]
 8001f76:	4b85      	ldr	r3, [pc, #532]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f82:	2301      	movs	r3, #1
 8001f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f86:	4b82      	ldr	r3, [pc, #520]	@ (8002190 <HAL_RCC_OscConfig+0x4c8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d118      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f92:	4b7f      	ldr	r3, [pc, #508]	@ (8002190 <HAL_RCC_OscConfig+0x4c8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a7e      	ldr	r2, [pc, #504]	@ (8002190 <HAL_RCC_OscConfig+0x4c8>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9e:	f7ff fbb7 	bl	8001710 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa6:	f7ff fbb3 	bl	8001710 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b64      	cmp	r3, #100	@ 0x64
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e103      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	4b75      	ldr	r3, [pc, #468]	@ (8002190 <HAL_RCC_OscConfig+0x4c8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x312>
 8001fcc:	4b6f      	ldr	r3, [pc, #444]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a6e      	ldr	r2, [pc, #440]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6213      	str	r3, [r2, #32]
 8001fd8:	e02d      	b.n	8002036 <HAL_RCC_OscConfig+0x36e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x334>
 8001fe2:	4b6a      	ldr	r3, [pc, #424]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4a69      	ldr	r2, [pc, #420]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	6213      	str	r3, [r2, #32]
 8001fee:	4b67      	ldr	r3, [pc, #412]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a66      	ldr	r2, [pc, #408]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	f023 0304 	bic.w	r3, r3, #4
 8001ff8:	6213      	str	r3, [r2, #32]
 8001ffa:	e01c      	b.n	8002036 <HAL_RCC_OscConfig+0x36e>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b05      	cmp	r3, #5
 8002002:	d10c      	bne.n	800201e <HAL_RCC_OscConfig+0x356>
 8002004:	4b61      	ldr	r3, [pc, #388]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4a60      	ldr	r2, [pc, #384]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 800200a:	f043 0304 	orr.w	r3, r3, #4
 800200e:	6213      	str	r3, [r2, #32]
 8002010:	4b5e      	ldr	r3, [pc, #376]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4a5d      	ldr	r2, [pc, #372]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6213      	str	r3, [r2, #32]
 800201c:	e00b      	b.n	8002036 <HAL_RCC_OscConfig+0x36e>
 800201e:	4b5b      	ldr	r3, [pc, #364]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a5a      	ldr	r2, [pc, #360]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	6213      	str	r3, [r2, #32]
 800202a:	4b58      	ldr	r3, [pc, #352]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4a57      	ldr	r2, [pc, #348]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d015      	beq.n	800206a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203e:	f7ff fb67 	bl	8001710 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002046:	f7ff fb63 	bl	8001710 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002054:	4293      	cmp	r3, r2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e0b1      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	4b4b      	ldr	r3, [pc, #300]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0ee      	beq.n	8002046 <HAL_RCC_OscConfig+0x37e>
 8002068:	e014      	b.n	8002094 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7ff fb51 	bl	8001710 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002070:	e00a      	b.n	8002088 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7ff fb4d 	bl	8001710 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002080:	4293      	cmp	r3, r2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e09b      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002088:	4b40      	ldr	r3, [pc, #256]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ee      	bne.n	8002072 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d105      	bne.n	80020a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209a:	4b3c      	ldr	r3, [pc, #240]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a3b      	ldr	r2, [pc, #236]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8087 	beq.w	80021be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b0:	4b36      	ldr	r3, [pc, #216]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d061      	beq.n	8002180 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d146      	bne.n	8002152 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c4:	4b33      	ldr	r3, [pc, #204]	@ (8002194 <HAL_RCC_OscConfig+0x4cc>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7ff fb21 	bl	8001710 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d2:	f7ff fb1d 	bl	8001710 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e06d      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e4:	4b29      	ldr	r3, [pc, #164]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f0      	bne.n	80020d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020f8:	d108      	bne.n	800210c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020fa:	4b24      	ldr	r3, [pc, #144]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	4921      	ldr	r1, [pc, #132]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800210c:	4b1f      	ldr	r3, [pc, #124]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a19      	ldr	r1, [r3, #32]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211c:	430b      	orrs	r3, r1
 800211e:	491b      	ldr	r1, [pc, #108]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002124:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7ff faf1 	bl	8001710 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002132:	f7ff faed 	bl	8001710 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e03d      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002144:	4b11      	ldr	r3, [pc, #68]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x46a>
 8002150:	e035      	b.n	80021be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002152:	4b10      	ldr	r3, [pc, #64]	@ (8002194 <HAL_RCC_OscConfig+0x4cc>)
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7ff fada 	bl	8001710 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002160:	f7ff fad6 	bl	8001710 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e026      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <HAL_RCC_OscConfig+0x4c4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x498>
 800217e:	e01e      	b.n	80021be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d107      	bne.n	8002198 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e019      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
 800218c:	40021000 	.word	0x40021000
 8002190:	40007000 	.word	0x40007000
 8002194:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002198:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <HAL_RCC_OscConfig+0x500>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d001      	beq.n	80021be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000

080021cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0d0      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021e0:	4b6a      	ldr	r3, [pc, #424]	@ (800238c <HAL_RCC_ClockConfig+0x1c0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d910      	bls.n	8002210 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b67      	ldr	r3, [pc, #412]	@ (800238c <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 0207 	bic.w	r2, r3, #7
 80021f6:	4965      	ldr	r1, [pc, #404]	@ (800238c <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b63      	ldr	r3, [pc, #396]	@ (800238c <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0b8      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d020      	beq.n	800225e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002228:	4b59      	ldr	r3, [pc, #356]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4a58      	ldr	r2, [pc, #352]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002232:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002240:	4b53      	ldr	r3, [pc, #332]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4a52      	ldr	r2, [pc, #328]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800224a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224c:	4b50      	ldr	r3, [pc, #320]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	494d      	ldr	r1, [pc, #308]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d040      	beq.n	80022ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	4b47      	ldr	r3, [pc, #284]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d115      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e07f      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228a:	4b41      	ldr	r3, [pc, #260]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e073      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229a:	4b3d      	ldr	r3, [pc, #244]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e06b      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022aa:	4b39      	ldr	r3, [pc, #228]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f023 0203 	bic.w	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4936      	ldr	r1, [pc, #216]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022bc:	f7ff fa28 	bl	8001710 <HAL_GetTick>
 80022c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	e00a      	b.n	80022da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c4:	f7ff fa24 	bl	8001710 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e053      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	4b2d      	ldr	r3, [pc, #180]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 020c 	and.w	r2, r3, #12
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d1eb      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022ec:	4b27      	ldr	r3, [pc, #156]	@ (800238c <HAL_RCC_ClockConfig+0x1c0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d210      	bcs.n	800231c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b24      	ldr	r3, [pc, #144]	@ (800238c <HAL_RCC_ClockConfig+0x1c0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 0207 	bic.w	r2, r3, #7
 8002302:	4922      	ldr	r1, [pc, #136]	@ (800238c <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230a:	4b20      	ldr	r3, [pc, #128]	@ (800238c <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e032      	b.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002328:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4916      	ldr	r1, [pc, #88]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d009      	beq.n	800235a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002346:	4b12      	ldr	r3, [pc, #72]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	490e      	ldr	r1, [pc, #56]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800235a:	f000 f821 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 800235e:	4602      	mov	r2, r0
 8002360:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	490a      	ldr	r1, [pc, #40]	@ (8002394 <HAL_RCC_ClockConfig+0x1c8>)
 800236c:	5ccb      	ldrb	r3, [r1, r3]
 800236e:	fa22 f303 	lsr.w	r3, r2, r3
 8002372:	4a09      	ldr	r2, [pc, #36]	@ (8002398 <HAL_RCC_ClockConfig+0x1cc>)
 8002374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002376:	4b09      	ldr	r3, [pc, #36]	@ (800239c <HAL_RCC_ClockConfig+0x1d0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff f986 	bl	800168c <HAL_InitTick>

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40022000 	.word	0x40022000
 8002390:	40021000 	.word	0x40021000
 8002394:	08002cac 	.word	0x08002cac
 8002398:	20000030 	.word	0x20000030
 800239c:	20000034 	.word	0x20000034

080023a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x94>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d002      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0x30>
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d003      	beq.n	80023d6 <HAL_RCC_GetSysClockFreq+0x36>
 80023ce:	e027      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023d0:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x98>)
 80023d2:	613b      	str	r3, [r7, #16]
      break;
 80023d4:	e027      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	0c9b      	lsrs	r3, r3, #18
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	4a17      	ldr	r2, [pc, #92]	@ (800243c <HAL_RCC_GetSysClockFreq+0x9c>)
 80023e0:	5cd3      	ldrb	r3, [r2, r3]
 80023e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d010      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023ee:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x94>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	0c5b      	lsrs	r3, r3, #17
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	4a11      	ldr	r2, [pc, #68]	@ (8002440 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023fa:	5cd3      	ldrb	r3, [r2, r3]
 80023fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a0d      	ldr	r2, [pc, #52]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x98>)
 8002402:	fb03 f202 	mul.w	r2, r3, r2
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	fbb2 f3f3 	udiv	r3, r2, r3
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	e004      	b.n	800241a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a0c      	ldr	r2, [pc, #48]	@ (8002444 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002414:	fb02 f303 	mul.w	r3, r2, r3
 8002418:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	613b      	str	r3, [r7, #16]
      break;
 800241e:	e002      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002420:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x98>)
 8002422:	613b      	str	r3, [r7, #16]
      break;
 8002424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002426:	693b      	ldr	r3, [r7, #16]
}
 8002428:	4618      	mov	r0, r3
 800242a:	371c      	adds	r7, #28
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
 8002438:	007a1200 	.word	0x007a1200
 800243c:	08002cbc 	.word	0x08002cbc
 8002440:	08002ccc 	.word	0x08002ccc
 8002444:	003d0900 	.word	0x003d0900

08002448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002450:	4b0a      	ldr	r3, [pc, #40]	@ (800247c <RCC_Delay+0x34>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0a      	ldr	r2, [pc, #40]	@ (8002480 <RCC_Delay+0x38>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	0a5b      	lsrs	r3, r3, #9
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002464:	bf00      	nop
  }
  while (Delay --);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1e5a      	subs	r2, r3, #1
 800246a:	60fa      	str	r2, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f9      	bne.n	8002464 <RCC_Delay+0x1c>
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	20000030 	.word	0x20000030
 8002480:	10624dd3 	.word	0x10624dd3

08002484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e041      	b.n	800251a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe fd5a 	bl	8000f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3304      	adds	r3, #4
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f000 fa56 	bl	8002974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d001      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e035      	b.n	80025a8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a16      	ldr	r2, [pc, #88]	@ (80025b4 <HAL_TIM_Base_Start_IT+0x90>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d009      	beq.n	8002572 <HAL_TIM_Base_Start_IT+0x4e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002566:	d004      	beq.n	8002572 <HAL_TIM_Base_Start_IT+0x4e>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a12      	ldr	r2, [pc, #72]	@ (80025b8 <HAL_TIM_Base_Start_IT+0x94>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d111      	bne.n	8002596 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b06      	cmp	r3, #6
 8002582:	d010      	beq.n	80025a6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002594:	e007      	b.n	80025a6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0201 	orr.w	r2, r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40012c00 	.word	0x40012c00
 80025b8:	40000400 	.word	0x40000400

080025bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d020      	beq.n	8002620 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01b      	beq.n	8002620 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0202 	mvn.w	r2, #2
 80025f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f998 	bl	800293c <HAL_TIM_IC_CaptureCallback>
 800260c:	e005      	b.n	800261a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f98b 	bl	800292a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f99a 	bl	800294e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b00      	cmp	r3, #0
 8002628:	d020      	beq.n	800266c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01b      	beq.n	800266c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0204 	mvn.w	r2, #4
 800263c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2202      	movs	r2, #2
 8002642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f972 	bl	800293c <HAL_TIM_IC_CaptureCallback>
 8002658:	e005      	b.n	8002666 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f965 	bl	800292a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f974 	bl	800294e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d020      	beq.n	80026b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01b      	beq.n	80026b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0208 	mvn.w	r2, #8
 8002688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2204      	movs	r2, #4
 800268e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f94c 	bl	800293c <HAL_TIM_IC_CaptureCallback>
 80026a4:	e005      	b.n	80026b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f93f 	bl	800292a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f94e 	bl	800294e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f003 0310 	and.w	r3, r3, #16
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d020      	beq.n	8002704 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d01b      	beq.n	8002704 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0210 	mvn.w	r2, #16
 80026d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2208      	movs	r2, #8
 80026da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f926 	bl	800293c <HAL_TIM_IC_CaptureCallback>
 80026f0:	e005      	b.n	80026fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f919 	bl	800292a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f928 	bl	800294e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00c      	beq.n	8002728 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d007      	beq.n	8002728 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f06f 0201 	mvn.w	r2, #1
 8002720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7fe fcf0 	bl	8001108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00c      	beq.n	800274c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002738:	2b00      	cmp	r3, #0
 800273a:	d007      	beq.n	800274c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fa6f 	bl	8002c2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00c      	beq.n	8002770 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d007      	beq.n	8002770 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f8f8 	bl	8002960 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f003 0320 	and.w	r3, r3, #32
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00c      	beq.n	8002794 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b00      	cmp	r3, #0
 8002782:	d007      	beq.n	8002794 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0220 	mvn.w	r2, #32
 800278c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fa42 	bl	8002c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_TIM_ConfigClockSource+0x1c>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e0b4      	b.n	8002922 <HAL_TIM_ConfigClockSource+0x186>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80027d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027f0:	d03e      	beq.n	8002870 <HAL_TIM_ConfigClockSource+0xd4>
 80027f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027f6:	f200 8087 	bhi.w	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 80027fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027fe:	f000 8086 	beq.w	800290e <HAL_TIM_ConfigClockSource+0x172>
 8002802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002806:	d87f      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002808:	2b70      	cmp	r3, #112	@ 0x70
 800280a:	d01a      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0xa6>
 800280c:	2b70      	cmp	r3, #112	@ 0x70
 800280e:	d87b      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002810:	2b60      	cmp	r3, #96	@ 0x60
 8002812:	d050      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x11a>
 8002814:	2b60      	cmp	r3, #96	@ 0x60
 8002816:	d877      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002818:	2b50      	cmp	r3, #80	@ 0x50
 800281a:	d03c      	beq.n	8002896 <HAL_TIM_ConfigClockSource+0xfa>
 800281c:	2b50      	cmp	r3, #80	@ 0x50
 800281e:	d873      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002820:	2b40      	cmp	r3, #64	@ 0x40
 8002822:	d058      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x13a>
 8002824:	2b40      	cmp	r3, #64	@ 0x40
 8002826:	d86f      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002828:	2b30      	cmp	r3, #48	@ 0x30
 800282a:	d064      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x15a>
 800282c:	2b30      	cmp	r3, #48	@ 0x30
 800282e:	d86b      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	2b20      	cmp	r3, #32
 8002832:	d060      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002834:	2b20      	cmp	r3, #32
 8002836:	d867      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b00      	cmp	r3, #0
 800283a:	d05c      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x15a>
 800283c:	2b10      	cmp	r3, #16
 800283e:	d05a      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002840:	e062      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002852:	f000 f96a 	bl	8002b2a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002864:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	609a      	str	r2, [r3, #8]
      break;
 800286e:	e04f      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002880:	f000 f953 	bl	8002b2a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002892:	609a      	str	r2, [r3, #8]
      break;
 8002894:	e03c      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a2:	461a      	mov	r2, r3
 80028a4:	f000 f8ca 	bl	8002a3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2150      	movs	r1, #80	@ 0x50
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 f921 	bl	8002af6 <TIM_ITRx_SetConfig>
      break;
 80028b4:	e02c      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028c2:	461a      	mov	r2, r3
 80028c4:	f000 f8e8 	bl	8002a98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2160      	movs	r1, #96	@ 0x60
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 f911 	bl	8002af6 <TIM_ITRx_SetConfig>
      break;
 80028d4:	e01c      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e2:	461a      	mov	r2, r3
 80028e4:	f000 f8aa 	bl	8002a3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2140      	movs	r1, #64	@ 0x40
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f901 	bl	8002af6 <TIM_ITRx_SetConfig>
      break;
 80028f4:	e00c      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4619      	mov	r1, r3
 8002900:	4610      	mov	r0, r2
 8002902:	f000 f8f8 	bl	8002af6 <TIM_ITRx_SetConfig>
      break;
 8002906:	e003      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
      break;
 800290c:	e000      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800290e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002920:	7bfb      	ldrb	r3, [r7, #15]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
	...

08002974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a2b      	ldr	r2, [pc, #172]	@ (8002a34 <TIM_Base_SetConfig+0xc0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d007      	beq.n	800299c <TIM_Base_SetConfig+0x28>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002992:	d003      	beq.n	800299c <TIM_Base_SetConfig+0x28>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a28      	ldr	r2, [pc, #160]	@ (8002a38 <TIM_Base_SetConfig+0xc4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d108      	bne.n	80029ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a20      	ldr	r2, [pc, #128]	@ (8002a34 <TIM_Base_SetConfig+0xc0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d007      	beq.n	80029c6 <TIM_Base_SetConfig+0x52>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029bc:	d003      	beq.n	80029c6 <TIM_Base_SetConfig+0x52>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002a38 <TIM_Base_SetConfig+0xc4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d108      	bne.n	80029d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002a34 <TIM_Base_SetConfig+0xc0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d103      	bne.n	8002a0c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f023 0201 	bic.w	r2, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	611a      	str	r2, [r3, #16]
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	40012c00 	.word	0x40012c00
 8002a38:	40000400 	.word	0x40000400

08002a3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	f023 0201 	bic.w	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f023 030a 	bic.w	r3, r3, #10
 8002a78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	621a      	str	r2, [r3, #32]
}
 8002a8e:	bf00      	nop
 8002a90:	371c      	adds	r7, #28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	f023 0210 	bic.w	r2, r3, #16
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	031b      	lsls	r3, r3, #12
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ad4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	621a      	str	r2, [r3, #32]
}
 8002aec:	bf00      	nop
 8002aee:	371c      	adds	r7, #28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b085      	sub	sp, #20
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f043 0307 	orr.w	r3, r3, #7
 8002b18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	609a      	str	r2, [r3, #8]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b087      	sub	sp, #28
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	021a      	lsls	r2, r3, #8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	609a      	str	r2, [r3, #8]
}
 8002b5e:	bf00      	nop
 8002b60:	371c      	adds	r7, #28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e041      	b.n	8002c04 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a14      	ldr	r2, [pc, #80]	@ (8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d009      	beq.n	8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bcc:	d004      	beq.n	8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a10      	ldr	r2, [pc, #64]	@ (8002c14 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d10c      	bne.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40012c00 	.word	0x40012c00
 8002c14:	40000400 	.word	0x40000400

08002c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <memset>:
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4402      	add	r2, r0
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d100      	bne.n	8002c46 <memset+0xa>
 8002c44:	4770      	bx	lr
 8002c46:	f803 1b01 	strb.w	r1, [r3], #1
 8002c4a:	e7f9      	b.n	8002c40 <memset+0x4>

08002c4c <__libc_init_array>:
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	2600      	movs	r6, #0
 8002c50:	4d0c      	ldr	r5, [pc, #48]	@ (8002c84 <__libc_init_array+0x38>)
 8002c52:	4c0d      	ldr	r4, [pc, #52]	@ (8002c88 <__libc_init_array+0x3c>)
 8002c54:	1b64      	subs	r4, r4, r5
 8002c56:	10a4      	asrs	r4, r4, #2
 8002c58:	42a6      	cmp	r6, r4
 8002c5a:	d109      	bne.n	8002c70 <__libc_init_array+0x24>
 8002c5c:	f000 f81a 	bl	8002c94 <_init>
 8002c60:	2600      	movs	r6, #0
 8002c62:	4d0a      	ldr	r5, [pc, #40]	@ (8002c8c <__libc_init_array+0x40>)
 8002c64:	4c0a      	ldr	r4, [pc, #40]	@ (8002c90 <__libc_init_array+0x44>)
 8002c66:	1b64      	subs	r4, r4, r5
 8002c68:	10a4      	asrs	r4, r4, #2
 8002c6a:	42a6      	cmp	r6, r4
 8002c6c:	d105      	bne.n	8002c7a <__libc_init_array+0x2e>
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
 8002c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c74:	4798      	blx	r3
 8002c76:	3601      	adds	r6, #1
 8002c78:	e7ee      	b.n	8002c58 <__libc_init_array+0xc>
 8002c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c7e:	4798      	blx	r3
 8002c80:	3601      	adds	r6, #1
 8002c82:	e7f2      	b.n	8002c6a <__libc_init_array+0x1e>
 8002c84:	08002cd0 	.word	0x08002cd0
 8002c88:	08002cd0 	.word	0x08002cd0
 8002c8c:	08002cd0 	.word	0x08002cd0
 8002c90:	08002cd4 	.word	0x08002cd4

08002c94 <_init>:
 8002c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c96:	bf00      	nop
 8002c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c9a:	bc08      	pop	{r3}
 8002c9c:	469e      	mov	lr, r3
 8002c9e:	4770      	bx	lr

08002ca0 <_fini>:
 8002ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca2:	bf00      	nop
 8002ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca6:	bc08      	pop	{r3}
 8002ca8:	469e      	mov	lr, r3
 8002caa:	4770      	bx	lr
